// Generated by CoffeeScript 2.5.1
  // p5 
  // solid

// Använd solid för att hålla datastrukturen uppdaterad.
  // Använd p5 för att rita upp den.
var Board, Counts, Knight, KnightHops, N, NOQUEENS, Queen, QueenHops, Queens, S, Target, Targets, Z, c, drawText, inside, r, rita,
  indexOf = [].indexOf;

import {
  log,
  range
} from '../js/utils.js';

S = 50;

N = 8;

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

NOQUEENS = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

Board = class Board {
  constructor() {
    this.draw = this.draw.bind(this);
    this.values = _.map(range(N * N), (i) => {
      return {
        ri: r(i),
        ci: c(i)
      };
    });
  }

  draw() {
    var ci, j, len, ref, results, ri;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ({ri, ci} = ref[j]);
      fill((ri + ci) % 2 ? 'darkgray' : 'lightgray');
      results.push(rect(S * ci, S * ri, S, S));
    }
    return results;
  }

};

drawText = (txt, ix) => {
  return text(txt, S / 2 + S * c(ix), S / 2 + S * r(ix) + 0.1 * S);
};

Counts = class Counts {
  constructor() {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.values = [];
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    textSize(0.5 * S);
    ref = range(this.values.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(drawText(this.values[i], Z.targets.values[i]));
    }
    return results;
  }

  update() {
    this.values.push(Z.count + 1);
    return Z.count = 0;
  }

};

Knight = class Knight {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return drawText('♘', this.value);
  }

};

KnightHops = class KnightHops {
  constructor() {
    var c2, col, dc, dr, index, j, k, l, len, len1, r2, ref, ref1, row, ts;
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    k = Z.knight.value;
    ts = Z.targets.values;
    if (k === -1) {
      return [];
    }
    this.values = [];
    col = c(k);
    row = r(k);
    ref = [-2, -1, 1, 2];
    for (j = 0, len = ref.length; j < len; j++) {
      dc = ref[j];
      ref1 = [-2, -1, 1, 2];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        dr = ref1[l];
        if (Math.abs(dc) === Math.abs(dr)) {
          continue;
        }
        c2 = col + dc;
        r2 = row + dr;
        index = c2 + N * r2;
        if (indexOf.call(range(N), c2) >= 0 && indexOf.call(range(N), r2) >= 0 && indexOf.call(ts, index) >= 0) {
          this.values.push(index);
        }
      }
    }
    this.values.sort(function(a, b) {
      return a - b;
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('white');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        Z.knight = new Knight(index);
        Z.knightHops = new KnightHops();
        if (index === Z.target.value) {
          Z.counts.update();
          Z.target.update(Z.targets.values[Z.counts.values.length + 1]);
          if (Z.counts.values.length === Z.targets.values.length - 1) {
            results.push(Z.state = 2);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(Z.count++);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Queen = class Queen {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return drawText('♛', this.value);
  }

  click() {
    if (inside(this.value)) {
      return Z.state = 0;
    }
  }

};

Queens = class Queens {
  constructor() {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.values = _.filter(range(N * N), function(i) {
      return indexOf.call(NOQUEENS, i) < 0;
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(drawText('♛', i));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        Z.count = 0;
        Z.counts = new Counts();
        Z.queen = new Queen(index);
        Z.queenHops = new QueenHops();
        Z.targets = new Targets();
        Z.knight = new Knight(Z.targets.values[Z.counts.values.length]);
        Z.target = new Target(Z.targets.values[Z.counts.values.length + 1]);
        Z.knightHops = new KnightHops();
        results.push(Z.state = 1);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

QueenHops = class QueenHops {
  constructor() {
    var f;
    this.draw = this.draw.bind(this);
    this.queen = Z.queen.value;
    f = (i) => {
      var ci, dc, dr, ri;
      ci = c(i);
      ri = r(i);
      dc = Math.abs(ci - this.cq);
      dr = Math.abs(ri - this.rq);
      return ci === this.cq || ri === this.rq || dc === dr;
    };
    this.cq = c(this.queen);
    this.rq = r(this.queen);
    this.values = _.filter(range(N * N), f);
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i !== this.queen) {
        results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Target = class Target {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.value = value;
  }

  draw() {
    push();
    stroke('yellow');
    strokeWeight(3);
    noFill();
    circle(S / 2 + S * c(this.value), S / 2 + S * r(this.value), S / 2);
    return pop();
  }

  update() {
    return this.value = Z.targets.values[Z.counts.values.length + 1];
  }

};

Targets = class Targets {
  constructor() {
    this.values = range(N * N).filter((i) => {
      return indexOf.call(Z.queenHops.values, i) < 0;
    });
  }

};

inside = function(index) {
  var ci, ri;
  ci = c(index);
  ri = r(index);
  return (S * ci < mouseX && mouseX < S * ci + S) && (S * ri < mouseY && mouseY < S * ri + S);
};

Z = {}; // object to hold global variables.

Z.state = 0;

Z.count = 0; //new Count

Z.counts = new Counts();

Z.board = new Board();

Z.queen = new Queen(0);

Z.queens = new Queens();

Z.queenHops = new QueenHops();

Z.targets = new Targets();

Z.knight = new Knight(Z.targets.values[0]);

Z.target = new Target(Z.targets.values[1]);

Z.knightHops = new KnightHops();

rita = () => {
  var j, len, op, ops, ref, results;
  background('gray');
  textSize(S);
  if (Z.state === 0) {
    ops = "board,queens";
  }
  if (Z.state === 1) {
    ops = "board,queen,queenHops,knight,target,counts,knightHops";
  }
  if (Z.state === 2) {
    ops = "board,queen,queenHops,knight,counts";
  }
  ref = ops.split(',');
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    op = ref[j];
    results.push(Z[op].draw());
  }
  return results;
};

window.mousePressed = () => {
  Z["queens,knightHops,queen".split(',')[Z.state]].click();
  return rita();
};

window.setup = () => {
  createCanvas(innerWidth, innerHeight);
  frameRate(1);
  textAlign(CENTER, CENTER);
  return rita();
};

//#####################################

// range = _.range
// logg = console.log
// logg navigator.userAgent
// os = if navigator.userAgent.includes 'Windows' then 'Windows' else 'Mac'

// audio = new Audio 'shortclick.mp3'

// intro = ["Select a queen"]

// sum = (arr)	=> arr.reduce(((a, b) => a + b), 0)

// NOQUEEN = [3,4,10,13,17,18,19,20,21,22,24,26,29,31,32,34,37,39,41,42,43,44,45,46,50,53,59,60]
// N = 8
// W = 0
// H = 0
// R = W//10
// c = (n) => n %% N
// r = (n) => n // N
// rects = []

// Queen = '♛'
// Knight = '♘'
// queen = 0
// queenHops = [] # indexes of squares taken by queen
// targets = [] # indexes of squares that knight must visit
// state = 0
// marginx = 0
// marginy = 0

// makeKnightHops = (knight) =>
// 	if knight==-1 then return []
// 	res = []
// 	col = c knight
// 	row = r knight
// 	for dc in [-2,-1,1,2]
// 		for dr in [-2,-1,1,2]
// 			if abs(dc) == abs(dr) then continue
// 			c2 = col + dc
// 			r2 = row + dr
// 			index = c2+8*r2
// 			if c2 in range(8) and r2 in range(8) and index in targets then res.push index
// 	res.sort (a,b) -> a-b
// 	res

// knight = 0
// knightHops = []
// clicks = 0
// counts = []	# number of clicks for each target
// taken = 0
// results = ['Move the knight to the yellow ring']

// start = 0

// window.onresize = -> reSize()

// reSize = ->
// 	H = min(innerHeight//11,innerWidth//9)
// 	W = H
// 	R = W//10
// 	resizeCanvas innerWidth, innerHeight
// 	rects = []
// 	marginx = (innerWidth-10*W)/2 + W//3
// 	marginy = H
// 	for index in range N*N
// 		ri = r index
// 		ci = c index
// 		col = if (ri + ci) % 2 then 'lightgray' else 'darkgray'
// 		x = 3*W/2 + W * c index
// 		y = H * (7-r index)
// 		rects.push new Rect index, marginx+x, marginy+y, W,H, col
// 	rects.push new Rect 64, marginx+W*0.6, marginy+8*H, 0.8*W,0.8*H, col

// placeQueen = (index) =>
// 	logg 'Q' + Position index
// 	if NOQUEEN.includes index
// 		logg 'No queen here'
// 		return

// 	queen = index
// 	makeQueenHops()
// 	targets = range(N*N).filter (i) => not queenHops.includes i
// 	targets.sort (a,b) -> b-a
// 	knight = targets[0]
// 	knightHops = makeKnightHops knight
// 	counts = []
// 	taken++
// 	state++

// newGame = () ->
// 	queen = 0
// 	queenHops = []
// 	knightHops = []
// 	targets = []
// 	state = 0
// 	knight = 0
// 	clicks = 0
// 	counts = []
// 	taken = 0
// 	start = new Date()

// moveKnight = (index) =>
// 	if queenHops.includes index then return
// 	col = c index
// 	row = r index
// 	dx = abs col - c knight
// 	dy = abs row - r knight
// 	if index in knightHops
// 		audio.play()
// 		knight = index
// 		knightHops = makeKnightHops knight
// 		clicks++
// 		if targets[taken] == knight
// 			taken++
// 			counts.push clicks
// 			clicks = 0
// 	if taken == targets.length
// 		results = ["Q#{Position queen}: #{sum(counts)} moves took #{(new Date()-start)/1000} seconds","Click Ok"]
// 		knightHops = []
// 		state = 2

// class Rect
// 	constructor : (@index, @x,@y, @w,@h, @col) ->
// 	draw : ->
// 		fill @col
// 		rect @x, @y, @w, @h
// 		if @index == 64
// 			fill 'black'
// 			textSize 0.5*W
// 			text "Ok", @x, @y
// 	inside : (x, y) -> abs(x-@x) <= W/2 and abs(y-@y) <= H/2
// 	click : -> 
// 		# audio.pause()
// 		if state==0 then placeQueen @index
// 		else if state==1 then moveKnight @index
// 		else if state==2 then newGame()
// 	drawPiece : (name) ->
// 		textSize 1.1 * W
// 		fill "black"
// 		if os=='Windows' then text name,@x,@y+0.1*H
// 		if os!='Windows' then text name,@x,@y+0.0*H
// 	drawQueenHop  : -> if r(queen)%2==0 and @index!=queen and @index in queenHops then ellipse @x, @y, 3*R
// 	drawKnightHop : -> if c(queen)%2==0 and @index in knightHops then ellipse @x, @y, 3*R
// 	text : (txt) ->
// 		textAlign CENTER, CENTER
// 		textSize 0.5*W
// 		fill 'black'
// 		text txt, @x, @y
// 	ring : =>
// 		noFill()
// 		push()
// 		strokeWeight 3
// 		stroke 'yellow'
// 		ellipse @x, @y, 5*R
// 		pop()

// setup = =>
// 	reSize()
// 	newGame()
// 	rectMode CENTER
// 	textAlign CENTER, CENTER
// 	createCanvas innerWidth, innerHeight

// Position = (index) -> "abcdefgh"[c index] + "12345678"[r index]

// info = ->
// 	fill 'black'
// 	textAlign CENTER, CENTER
// 	textSize 0.5*W
// 	temp = if state==0 then intro else results
// 	for result,i in temp
// 		text result,innerWidth//2, 10*H + i*H/2

// drawBoard = =>
// 	n = [64,64,65][state]
// 	rect.draw() for rect in rects.slice 0,n

// showLittera = (flag) =>
// 	col1 = "black"
// 	col2 = "white"
// 	textSize 0.5*W
// 	for i in range N
// 		x = W*(1.5+i) + marginx
// 		y = W*(N-1-i) + marginy
// 		col3 = if flag then [col2,col1][i%2] else col1
// 		noFill()
// 		if flag and i%2==0 then circle x, W*(N+1), 0.6*W
// 		fill col1
// 		if flag and i%2==0 then circle marginx+W/2, y,0.6*W
// 		text "abcdefgh"[i], x, W*(N+1)
// 		if i%2==0 then fill col3 else fill col1
// 		text "12345678"[i], marginx+W/2, y

// draw = =>
// 	background 128
// 	drawBoard()
// 	showLittera state==0
// 	info()

// 	textAlign CENTER, CENTER
// 	if state == 1
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// 	textSize 0.55*W
// 	for i in range taken
// 		if targets[i] != knight
// 			rects[targets[i]].text counts[i]

// 	fill 'black'
// 	for i in queenHops
// 		rects[i].drawQueenHop()

// 	fill 'white'
// 	for i in knightHops
// 		rects[i].drawKnightHop()

// 	if state == 0
// 		for i in range(N*N)
// 			if not NOQUEEN.includes i
// 				rects[i].drawPiece(Queen)

// 	if state == 1
// 		rects[targets[taken]].ring()

// 	if state == 2
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// mousePressed = ->
// 	if state == 2
// 		rect = rects[64]
// 		if rect.inside mouseX, mouseY then rect.click()
// 		# newGame()
// 		# return
// 	else
// 		for rect in rects
// 			if rect.inside mouseX, mouseY then rect.click()

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves-p5-solid\coffee\sketch1.coffee