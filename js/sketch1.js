// Generated by CoffeeScript 2.5.1
  // p5 
  // solid

// Använd solid för att hålla datastrukturen uppdaterad.
  // Använd p5 för att rita upp den.
var Board, Count, Counts, Knight, KnightHops, N, NOQUEENS, Queen, QueenHops, Queens, S, State, Target, Targets, Z, acc, c, inside, r, rita,
  indexOf = [].indexOf;

import {
  log,
  range
} from '../js/utils.js';

S = 50;

N = 8;

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

NOQUEENS = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

acc = 0;

Board = class Board {
  constructor() {
    this.draw = this.draw.bind(this);
    this.values = _.map(range(N * N), (i) => {
      return {
        i,
        ri: r(i),
        ci: c(i)
      };
    });
  }

  draw() {
    var ci, i, j, len, ref, results, ri;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ({i, ri, ci} = ref[j]);
      fill((ri + ci) % 2 ? 'darkgray' : 'lightgray');
      results.push(rect(S * ci, S * ri, S, S));
    }
    return results;
  }

};

Count = class Count {
  constructor() {
    this.update = this.update.bind(this);
    this.value = 0;
  }

  update() {
    return this.value++;
  }

};

Counts = class Counts {
  constructor() {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.values = [];
  }

  draw() {
    var col, i, ix, j, len, ref, results, row;
    fill('black');
    textSize(0.5 * S);
    ref = range(this.values.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      ix = Z.targets.values[i];
      col = c(ix);
      row = r(ix);
      results.push(text(this.values[i], S / 2 + S * col, S / 2 + S * row + 0.05 * S));
    }
    return results;
  }

  update() {
    this.values.push(Z.count.value + 1);
    return Z.count = new Count();
  }

};

Knight = class Knight {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return text('♘', S / 2 + S * c(this.value), S / 2 + S * r(this.value) + 0.1 * S);
  }

};

KnightHops = class KnightHops {
  constructor() {
    var c2, col, dc, dr, index, j, k, l, len, len1, r2, ref, ref1, row, ts;
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    k = Z.knight.value;
    ts = Z.targets.values;
    if (k === -1) {
      return [];
    }
    this.values = [];
    col = c(k);
    row = r(k);
    ref = [-2, -1, 1, 2];
    for (j = 0, len = ref.length; j < len; j++) {
      dc = ref[j];
      ref1 = [-2, -1, 1, 2];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        dr = ref1[l];
        if (Math.abs(dc) === Math.abs(dr)) {
          continue;
        }
        c2 = col + dc;
        r2 = row + dr;
        index = c2 + N * r2;
        if (indexOf.call(range(N), c2) >= 0 && indexOf.call(range(N), r2) >= 0 && indexOf.call(ts, index) >= 0) {
          this.values.push(index);
        }
      }
    }
    this.values.sort(function(a, b) {
      return a - b;
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('white');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        Z.knight = new Knight(index);
        Z.knightHops = new KnightHops();
        if (index === Z.target.value) {
          Z.counts.update();
          Z.target.update(Z.targets.values[Z.counts.values.length + 1]);
          if (Z.counts.values.length === Z.targets.values.length - 1) {
            results.push(Z.state = new State(2));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(Z.count.update());
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Queen = class Queen {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return text('♛', S / 2 + S * c(this.value), S / 2 + S * r(this.value) + 0.1 * S);
  }

  click() {
    if (inside(this.value)) {
      return Z.state = new State(0);
    }
  }

};

Queens = class Queens {
  constructor() {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.values = _.filter(range(N * N), function(i) {
      return !NOQUEENS.includes(i);
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(text('♛', S / 2 + S * c(i), S / 2 + S * r(i) + 0.1 * S));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        Z.count = new Count();
        Z.counts = new Counts();
        Z.queen = new Queen(index);
        Z.queenHops = new QueenHops();
        Z.targets = new Targets();
        Z.knight = new Knight(Z.targets.values[Z.counts.values.length]);
        Z.target = new Target(Z.targets.values[Z.counts.values.length + 1]);
        Z.knightHops = new KnightHops();
        results.push(Z.state = new State(1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

QueenHops = class QueenHops {
  constructor() {
    var f;
    this.draw = this.draw.bind(this);
    this.queen = Z.queen.value;
    f = (i) => {
      var ci, dc, dr, ri;
      ci = c(i);
      ri = r(i);
      dc = Math.abs(ci - this.cq);
      dr = Math.abs(ri - this.rq);
      return ci === this.cq || ri === this.rq || dc === dr;
    };
    this.cq = c(this.queen);
    this.rq = r(this.queen);
    this.values = _.filter(range(N * N), f);
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i !== this.queen) {
        results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

State = class State {
  constructor(value) {
    this.value = value;
  }

};

Target = class Target {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.value = value;
  }

  draw() {
    push();
    stroke('yellow');
    strokeWeight(3);
    noFill();
    circle(S / 2 + S * c(this.value), S / 2 + S * r(this.value), S / 2);
    return pop();
  }

  update() {
    return this.value = Z.targets.values[Z.counts.values.length + 1];
  }

};

Targets = class Targets {
  constructor() {
    this.values = range(N * N).filter((i) => {
      return indexOf.call(Z.queenHops.values, i) < 0;
    });
  }

};

inside = function(index) {
  var ci, ri;
  ci = c(index);
  ri = r(index);
  return (S * ci < mouseX && mouseX < S * ci + S) && (S * ri < mouseY && mouseY < S * ri + S);
};

Z = {};

Z.count = new Count();

Z.counts = new Counts();

Z.state = new State(0);

Z.board = new Board();

Z.queen = new Queen(0);

Z.queens = new Queens();

Z.queenHops = new QueenHops();

Z.targets = new Targets();

Z.target = new Target(Z.targets.values[1]);

Z.knight = new Knight(34);

Z.knightHops = new KnightHops();

rita = () => {
  var j, len, op, ops, results;
  background('gray');
  textSize(50);
  if (Z.state.value === 0) {
    ops = "board,queens".split(',');
  }
  if (Z.state.value === 1) {
    ops = "board,queen,queenHops,knight,target,counts,knightHops".split(',');
  }
  if (Z.state.value === 2) {
    ops = "board,queen,queenHops,knight,counts".split(',');
  }
  results = [];
  for (j = 0, len = ops.length; j < len; j++) {
    op = ops[j];
    results.push(Z[op].draw());
  }
  return results;
};

window.mousePressed = () => {
  var start;
  start = new Date();
  Z["queens,knightHops,queen".split(',')[Z.state.value]].click();
  rita();
  acc += new Date() - start;
  return log(acc);
};

window.setup = () => {
  createCanvas(innerWidth, innerHeight);
  frameRate(1);
  textAlign(CENTER, CENTER);
  return rita();
};

//#####################################

// range = _.range
// logg = console.log
// logg navigator.userAgent
// os = if navigator.userAgent.includes 'Windows' then 'Windows' else 'Mac'

// audio = new Audio 'shortclick.mp3'

// intro = ["Select a queen"]

// sum = (arr)	=> arr.reduce(((a, b) => a + b), 0)

// NOQUEEN = [3,4,10,13,17,18,19,20,21,22,24,26,29,31,32,34,37,39,41,42,43,44,45,46,50,53,59,60]
// N = 8
// W = 0
// H = 0
// R = W//10
// c = (n) => n %% N
// r = (n) => n // N
// rects = []

// Queen = '♛'
// Knight = '♘'
// queen = 0
// queenHops = [] # indexes of squares taken by queen
// targets = [] # indexes of squares that knight must visit
// state = 0
// marginx = 0
// marginy = 0

// makeKnightHops = (knight) =>
// 	if knight==-1 then return []
// 	res = []
// 	col = c knight
// 	row = r knight
// 	for dc in [-2,-1,1,2]
// 		for dr in [-2,-1,1,2]
// 			if abs(dc) == abs(dr) then continue
// 			c2 = col + dc
// 			r2 = row + dr
// 			index = c2+8*r2
// 			if c2 in range(8) and r2 in range(8) and index in targets then res.push index
// 	res.sort (a,b) -> a-b
// 	res

// knight = 0
// knightHops = []
// clicks = 0
// counts = []	# number of clicks for each target
// taken = 0
// results = ['Move the knight to the yellow ring']

// start = 0

// window.onresize = -> reSize()

// reSize = ->
// 	H = min(innerHeight//11,innerWidth//9)
// 	W = H
// 	R = W//10
// 	resizeCanvas innerWidth, innerHeight
// 	rects = []
// 	marginx = (innerWidth-10*W)/2 + W//3
// 	marginy = H
// 	for index in range N*N
// 		ri = r index
// 		ci = c index
// 		col = if (ri + ci) % 2 then 'lightgray' else 'darkgray'
// 		x = 3*W/2 + W * c index
// 		y = H * (7-r index)
// 		rects.push new Rect index, marginx+x, marginy+y, W,H, col
// 	rects.push new Rect 64, marginx+W*0.6, marginy+8*H, 0.8*W,0.8*H, col

// placeQueen = (index) =>
// 	logg 'Q' + Position index
// 	if NOQUEEN.includes index
// 		logg 'No queen here'
// 		return

// 	queen = index
// 	makeQueenHops()
// 	targets = range(N*N).filter (i) => not queenHops.includes i
// 	targets.sort (a,b) -> b-a
// 	knight = targets[0]
// 	knightHops = makeKnightHops knight
// 	counts = []
// 	taken++
// 	state++

// newGame = () ->
// 	queen = 0
// 	queenHops = []
// 	knightHops = []
// 	targets = []
// 	state = 0
// 	knight = 0
// 	clicks = 0
// 	counts = []
// 	taken = 0
// 	start = new Date()

// moveKnight = (index) =>
// 	if queenHops.includes index then return
// 	col = c index
// 	row = r index
// 	dx = abs col - c knight
// 	dy = abs row - r knight
// 	if index in knightHops
// 		audio.play()
// 		knight = index
// 		knightHops = makeKnightHops knight
// 		clicks++
// 		if targets[taken] == knight
// 			taken++
// 			counts.push clicks
// 			clicks = 0
// 	if taken == targets.length
// 		results = ["Q#{Position queen}: #{sum(counts)} moves took #{(new Date()-start)/1000} seconds","Click Ok"]
// 		knightHops = []
// 		state = 2

// class Rect
// 	constructor : (@index, @x,@y, @w,@h, @col) ->
// 	draw : ->
// 		fill @col
// 		rect @x, @y, @w, @h
// 		if @index == 64
// 			fill 'black'
// 			textSize 0.5*W
// 			text "Ok", @x, @y
// 	inside : (x, y) -> abs(x-@x) <= W/2 and abs(y-@y) <= H/2
// 	click : -> 
// 		# audio.pause()
// 		if state==0 then placeQueen @index
// 		else if state==1 then moveKnight @index
// 		else if state==2 then newGame()
// 	drawPiece : (name) ->
// 		textSize 1.1 * W
// 		fill "black"
// 		if os=='Windows' then text name,@x,@y+0.1*H
// 		if os!='Windows' then text name,@x,@y+0.0*H
// 	drawQueenHop  : -> if r(queen)%2==0 and @index!=queen and @index in queenHops then ellipse @x, @y, 3*R
// 	drawKnightHop : -> if c(queen)%2==0 and @index in knightHops then ellipse @x, @y, 3*R
// 	text : (txt) ->
// 		textAlign CENTER, CENTER
// 		textSize 0.5*W
// 		fill 'black'
// 		text txt, @x, @y
// 	ring : =>
// 		noFill()
// 		push()
// 		strokeWeight 3
// 		stroke 'yellow'
// 		ellipse @x, @y, 5*R
// 		pop()

// setup = =>
// 	reSize()
// 	newGame()
// 	rectMode CENTER
// 	textAlign CENTER, CENTER
// 	createCanvas innerWidth, innerHeight

// Position = (index) -> "abcdefgh"[c index] + "12345678"[r index]

// info = ->
// 	fill 'black'
// 	textAlign CENTER, CENTER
// 	textSize 0.5*W
// 	temp = if state==0 then intro else results
// 	for result,i in temp
// 		text result,innerWidth//2, 10*H + i*H/2

// drawBoard = =>
// 	n = [64,64,65][state]
// 	rect.draw() for rect in rects.slice 0,n

// showLittera = (flag) =>
// 	col1 = "black"
// 	col2 = "white"
// 	textSize 0.5*W
// 	for i in range N
// 		x = W*(1.5+i) + marginx
// 		y = W*(N-1-i) + marginy
// 		col3 = if flag then [col2,col1][i%2] else col1
// 		noFill()
// 		if flag and i%2==0 then circle x, W*(N+1), 0.6*W
// 		fill col1
// 		if flag and i%2==0 then circle marginx+W/2, y,0.6*W
// 		text "abcdefgh"[i], x, W*(N+1)
// 		if i%2==0 then fill col3 else fill col1
// 		text "12345678"[i], marginx+W/2, y

// draw = =>
// 	background 128
// 	drawBoard()
// 	showLittera state==0
// 	info()

// 	textAlign CENTER, CENTER
// 	if state == 1
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// 	textSize 0.55*W
// 	for i in range taken
// 		if targets[i] != knight
// 			rects[targets[i]].text counts[i]

// 	fill 'black'
// 	for i in queenHops
// 		rects[i].drawQueenHop()

// 	fill 'white'
// 	for i in knightHops
// 		rects[i].drawKnightHop()

// 	if state == 0
// 		for i in range(N*N)
// 			if not NOQUEEN.includes i
// 				rects[i].drawPiece(Queen)

// 	if state == 1
// 		rects[targets[taken]].ring()

// 	if state == 2
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// mousePressed = ->
// 	if state == 2
// 		rect = rects[64]
// 		if rect.inside mouseX, mouseY then rect.click()
// 		# newGame()
// 		# return
// 	else
// 		for rect in rects
// 			if rect.inside mouseX, mouseY then rect.click()

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoMS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxza2V0Y2gxLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSWlDOzs7OztBQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxDQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUE7RUFBQTs7QUFFakMsT0FBQTtFQUFRLEdBQVI7RUFBWSxLQUFaO0NBQUEsTUFBQTs7QUFFQSxDQUFBLEdBQUk7O0FBQ0osQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSSxDQUFDLENBQUQsQ0FBQSxHQUFBO29CQUFPLElBQUs7QUFBWjs7QUFDSixDQUFBLEdBQUksQ0FBQyxDQUFELENBQUEsR0FBQTtTQUFPLENBQUEsR0FBSTtBQUFYOztBQUNKLFFBQUEsR0FBVyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssRUFBTCxFQUFRLEVBQVIsRUFBVyxFQUFYLEVBQWMsRUFBZCxFQUFpQixFQUFqQixFQUFvQixFQUFwQixFQUF1QixFQUF2QixFQUEwQixFQUExQixFQUE2QixFQUE3QixFQUFnQyxFQUFoQyxFQUFtQyxFQUFuQyxFQUFzQyxFQUF0QyxFQUF5QyxFQUF6QyxFQUE0QyxFQUE1QyxFQUErQyxFQUEvQyxFQUFrRCxFQUFsRCxFQUFxRCxFQUFyRCxFQUF3RCxFQUF4RCxFQUEyRCxFQUEzRCxFQUE4RCxFQUE5RCxFQUFpRSxFQUFqRSxFQUFvRSxFQUFwRSxFQUF1RSxFQUF2RSxFQUEwRSxFQUExRSxFQUE2RSxFQUE3RSxFQUFnRixFQUFoRjs7QUFDWCxHQUFBLEdBQUs7O0FBRUMsUUFBTixNQUFBLE1BQUE7RUFDQyxXQUFj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dUQsQ0FBQyxLQUF4RCxDQUE4RCxHQUE5RCxFQUEvQjs7RUFDQSxJQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBUixLQUFlLENBQWxCO0lBQXlCLEdBQUEsR0FBTSxxQ0FBcUMsQ0FBQyxLQUF0QyxDQUE0QyxHQUE1QyxFQUEvQjs7QUFDQTtFQUFBLEtBQUEscUNBQUE7O2lCQUFBLENBQUMsQ0FBQyxFQUFELENBQUksQ0FBQyxJQUFOLENBQUE7RUFBQSxDQUFBOztBQU5NOztBQVFQLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLENBQUEsQ0FBQSxHQUFBO0FBQ3RCLE1BQUE7RUFBQyxLQUFBLEdBQVEsSUFBSSxJQUFKLENBQUE7RUFDUixDQUFDLENBQUMseUJBQXlCLENBQUMsS0FBMUIsQ0FBZ0MsR0FBaEMsQ0FBb0MsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQVQsQ0FBckMsQ0FBcUQsQ0FBQyxLQUF2RCxDQUFBO0VBQ0EsSUFBQSxDQUFBO0VBQ0EsR0FBQSxJQUFPLElBQUksSUFBSixDQUFBLENBQUEsR0FBVztTQUNsQixHQUFBLENBQUksR0FBSjtBQUxxQjs7QUFPdEIsTUFBTSxDQUFDLEtBQVAsR0FBZSxDQUFBLENBQUEsR0FBQTtFQUNkLFlBQUEsQ0FBYSxVQUFiLEVBQXlCLFdBQXpCO0VBQ0EsU0FBQSxDQUFVLENBQVY7RUFDQSxTQUFBLENBQVUsTUFBVixFQUFrQixNQUFsQjtTQUNBLElBQUEsQ0FBQTtBQUpjOztBQXhLa0IiLCJzb3VyY2VzQ29udGVudCI6WyIjIHA1IFxyXG4jIHNvbGlkXHJcblxyXG4jIEFudsOkbmQgc29saWQgZsO2ciBhdHQgaMOlbGxhIGRhdGFzdHJ1a3R1cmVuIHVwcGRhdGVyYWQuXHJcbiMgQW52w6RuZCBwNSBmw7ZyIGF0dCByaXRhIHVwcCBkZW4uXHJcblxyXG5pbXBvcnQge2xvZyxyYW5nZX0gZnJvbSAnLi4vanMvdXRpbHMuanMnXHJcblxyXG5TID0gNTBcclxuTiA9IDhcclxuciA9IChpKSA9PiBpIC8vIE5cclxuYyA9IChpKSA9PiBpICUgTlxyXG5OT1FVRUVOUyA9IFszLDQsMTAsMTMsMTcsMTgsMTksMjAsMjEsMjIsMjQsMjYsMjksMzEsMzIsMzQsMzcsMzksNDEsNDIsNDMsNDQsNDUsNDYsNTAsNTMsNTksNjBdXHJcbmFjYyA9MFxyXG5cclxuY2xhc3MgQm9hcmRcclxuXHRjb25zdHJ1Y3RvciA6IC0+IEB2YWx1ZXMgPSBfLm1hcCByYW5nZShOKk4pLCAoaSkgPT4ge2ksIHJpOnIoaSksIGNpOmMoaSl9XHJcblx0ZHJhdyA6ID0+XHJcblx0XHRmb3Ige2kscmksY2l9IGluIEB2YWx1ZXNcclxuXHRcdFx0ZmlsbCBpZiAocmkrY2kpICUgMiB0aGVuICdkYXJrZ3JheScgZWxzZSAnbGlnaHRncmF5J1xyXG5cdFx0XHRyZWN0IFMqY2ksIFMqcmksIFMsIFNcclxuXHJcbmNsYXNzIENvdW50XHJcblx0Y29uc3RydWN0b3IgOiAtPiBAdmFsdWUgPSAwXHJcblx0dXBkYXRlIDogPT4gQHZhbHVlKytcclxuXHJcbmNsYXNzIENvdW50c1xyXG5cdGNvbnN0cnVjdG9yIDogLT4gQHZhbHVlcyA9IFtdXHJcblx0ZHJhdyA6ID0+XHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHRleHRTaXplIDAuNSpTXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAdmFsdWVzLmxlbmd0aFxyXG5cdFx0XHRpeCA9IFoudGFyZ2V0cy52YWx1ZXNbaV1cclxuXHRcdFx0Y29sID0gYyBpeFxyXG5cdFx0XHRyb3cgPSByIGl4XHJcblx0XHRcdHRleHQgQHZhbHVlc1tpXSwgUy8yK1MqY29sLCBTLzIrUypyb3crMC4wNSpTXHJcblx0dXBkYXRlIDogPT5cclxuXHRcdEB2YWx1ZXMucHVzaCBaLmNvdW50LnZhbHVlICsgMVxyXG5cdFx0Wi5jb3VudCA9IG5ldyBDb3VudFxyXG5cclxuY2xhc3MgS25pZ2h0XHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPlxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0ICfimZgnLCBTLzIrUypjKEB2YWx1ZSksIFMvMitTKnIoQHZhbHVlKSswLjEqU1xyXG5cclxuY2xhc3MgS25pZ2h0SG9wc1xyXG5cdGNvbnN0cnVjdG9yIDogIC0+XHJcblx0XHRrID0gWi5rbmlnaHQudmFsdWVcclxuXHRcdHRzID0gWi50YXJnZXRzLnZhbHVlc1xyXG5cdFx0aWYgaz09LTEgdGhlbiByZXR1cm4gW11cclxuXHRcdEB2YWx1ZXMgPSBbXVxyXG5cdFx0Y29sID0gYyBrXHJcblx0XHRyb3cgPSByIGtcclxuXHRcdGZvciBkYyBpbiBbLTIsLTEsMSwyXVxyXG5cdFx0XHRmb3IgZHIgaW4gWy0yLC0xLDEsMl1cclxuXHRcdFx0XHRpZiBNYXRoLmFicyhkYykgPT0gTWF0aC5hYnMoZHIpIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRjMiA9IGNvbCArIGRjXHJcblx0XHRcdFx0cjIgPSByb3cgKyBkclxyXG5cdFx0XHRcdGluZGV4ID0gYzIrTipyMlxyXG5cdFx0XHRcdGlmIGMyIGluIHJhbmdlKE4pIGFuZCByMiBpbiByYW5nZShOKSBhbmQgaW5kZXggaW4gdHMgdGhlbiBAdmFsdWVzLnB1c2ggaW5kZXhcclxuXHRcdEB2YWx1ZXMuc29ydCAoYSxiKSAtPiBhLWJcclxuXHRkcmF3IDogPT5cclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0Zm9yIGkgaW4gQHZhbHVlc1xyXG5cdFx0XHRjaXJjbGUgUy8yK1MqYyhpKSwgUy8yK1MqcihpKSwgUy80XHJcblx0Y2xpY2sgOiA9PlxyXG5cdFx0Zm9yIGluZGV4IGluIEB2YWx1ZXNcclxuXHRcdFx0aWYgaW5zaWRlIGluZGV4XHJcblx0XHRcdFx0Wi5rbmlnaHQgPSBuZXcgS25pZ2h0IGluZGV4XHJcblx0XHRcdFx0Wi5rbmlnaHRIb3BzID0gbmV3IEtuaWdodEhvcHNcclxuXHRcdFx0XHRpZiBpbmRleCA9PSBaLnRhcmdldC52YWx1ZVxyXG5cdFx0XHRcdFx0Wi5jb3VudHMudXBkYXRlKClcclxuXHRcdFx0XHRcdFoudGFyZ2V0LnVwZGF0ZSBaLnRhcmdldHMudmFsdWVzW1ouY291bnRzLnZhbHVlcy5sZW5ndGgrMV1cclxuXHRcdFx0XHRcdGlmIFouY291bnRzLnZhbHVlcy5sZW5ndGggPT0gWi50YXJnZXRzLnZhbHVlcy5sZW5ndGgtMSB0aGVuIFouc3RhdGUgPSBuZXcgU3RhdGUgMlxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFouY291bnQudXBkYXRlKClcclxuXHJcbmNsYXNzIFF1ZWVuXHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPiBcclxuXHRkcmF3IDogPT5cclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0dGV4dCAn4pmbJywgUy8yK1MqYyhAdmFsdWUpLCBTLzIrUypyKEB2YWx1ZSkrMC4xKlNcclxuXHRjbGljayA6ID0+IGlmIGluc2lkZSBAdmFsdWUgdGhlbiBaLnN0YXRlID0gbmV3IFN0YXRlIDBcclxuXHJcbmNsYXNzIFF1ZWVuc1xyXG5cdGNvbnN0cnVjdG9yIDogLT4gQHZhbHVlcyA9IF8uZmlsdGVyIHJhbmdlKE4qTiksIChpKSAtPiBub3QgTk9RVUVFTlMuaW5jbHVkZXMgaVxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRmb3IgaSBpbiBAdmFsdWVzXHJcblx0XHRcdHRleHQgJ+KZmycsIFMvMitTKmMoaSksIFMvMitTKnIoaSkrMC4xKlNcclxuXHRjbGljayA6ID0+XHJcblx0XHRmb3IgaW5kZXggaW4gQHZhbHVlc1xyXG5cdFx0XHRpZiBpbnNpZGUgaW5kZXhcclxuXHRcdFx0XHRaLmNvdW50ID0gbmV3IENvdW50XHJcblx0XHRcdFx0Wi5jb3VudHMgPSBuZXcgQ291bnRzXHJcblx0XHRcdFx0Wi5xdWVlbiA9IG5ldyBRdWVlbiBpbmRleFxyXG5cdFx0XHRcdFoucXVlZW5Ib3BzID0gbmV3IFF1ZWVuSG9wc1xyXG5cdFx0XHRcdFoudGFyZ2V0cyAgPSBuZXcgVGFyZ2V0c1xyXG5cdFx0XHRcdFoua25pZ2h0ID0gbmV3IEtuaWdodCBaLnRhcmdldHMudmFsdWVzW1ouY291bnRzLnZhbHVlcy5sZW5ndGhdXHJcblxyXG5cdFx0XHRcdFoudGFyZ2V0ID0gbmV3IFRhcmdldCBaLnRhcmdldHMudmFsdWVzW1ouY291bnRzLnZhbHVlcy5sZW5ndGgrMV1cclxuXHRcdFx0XHRaLmtuaWdodEhvcHMgPSBuZXcgS25pZ2h0SG9wc1xyXG5cdFx0XHRcdFouc3RhdGUgPSBuZXcgU3RhdGUgMVxyXG5cclxuY2xhc3MgUXVlZW5Ib3BzXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdFx0QHF1ZWVuID0gIFoucXVlZW4udmFsdWVcclxuXHRcdGYgPSAoaSkgPT5cclxuXHRcdFx0Y2kgPSBjIGlcclxuXHRcdFx0cmkgPSByIGlcclxuXHRcdFx0ZGMgPSBNYXRoLmFicyBjaSAtIEBjcVxyXG5cdFx0XHRkciA9IE1hdGguYWJzIHJpIC0gQHJxXHJcblx0XHRcdGNpID09IEBjcSBvciByaSA9PSBAcnEgb3IgZGMgPT0gZHJcclxuXHRcdEBjcSA9IGMgQHF1ZWVuXHJcblx0XHRAcnEgPSByIEBxdWVlblxyXG5cdFx0QHZhbHVlcyA9IF8uZmlsdGVyIHJhbmdlKE4qTiksIGZcclxuXHRkcmF3OiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRmb3IgaSBpbiBAdmFsdWVzXHJcblx0XHRcdGlmIGkgIT0gQHF1ZWVuIHRoZW4gY2lyY2xlIFMvMitTKmMoaSksIFMvMitTKnIoaSksIFMvNFxyXG5cclxuY2xhc3MgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAdmFsdWUpIC0+XHJcblxyXG5jbGFzcyBUYXJnZXRcclxuXHRjb25zdHJ1Y3RvciA6IChAdmFsdWUpIC0+XHJcblx0ZHJhdyA6ID0+XHJcblx0XHRwdXNoKClcclxuXHRcdHN0cm9rZSAneWVsbG93J1xyXG5cdFx0c3Ryb2tlV2VpZ2h0IDNcclxuXHRcdG5vRmlsbCgpXHJcblx0XHRjaXJjbGUgUy8yK1MqYyhAdmFsdWUpLCBTLzIrUypyKEB2YWx1ZSksIFMvMlxyXG5cdFx0cG9wKClcclxuXHR1cGRhdGUgOiAoKSA9PiBAdmFsdWUgPSBaLnRhcmdldHMudmFsdWVzW1ouY291bnRzLnZhbHVlcy5sZW5ndGgrMV1cclxuXHJcbmNsYXNzIFRhcmdldHNcclxuXHRjb25zdHJ1Y3RvciA6IC0+IEB2YWx1ZXMgPSByYW5nZShOKk4pLmZpbHRlciAoaSkgPT4gaSBub3QgaW4gWi5xdWVlbkhvcHMudmFsdWVzXHJcblxyXG5pbnNpZGUgPSAoaW5kZXgpIC0+XHJcblx0Y2kgPSBjIGluZGV4XHJcblx0cmkgPSByIGluZGV4XHJcblx0UypjaSA8IG1vdXNlWCA8IFMqY2krUyBhbmQgUypyaSA8IG1vdXNlWSA8IFMqcmkrU1xyXG5cclxuWiA9IHt9XHJcblouY291bnQgPSBuZXcgQ291bnRcclxuWi5jb3VudHMgPSBuZXcgQ291bnRzXHJcblouc3RhdGUgPSBuZXcgU3RhdGUgMFxyXG5aLmJvYXJkID0gIG5ldyBCb2FyZFxyXG5aLnF1ZWVuID0gbmV3IFF1ZWVuIDBcclxuWi5xdWVlbnMgPSBuZXcgUXVlZW5zXHJcbloucXVlZW5Ib3BzID0gbmV3IFF1ZWVuSG9wc1xyXG5aLnRhcmdldHMgPSBuZXcgVGFyZ2V0c1xyXG5aLnRhcmdldCA9IG5ldyBUYXJnZXQgWi50YXJnZXRzLnZhbHVlc1sxXVxyXG5aLmtuaWdodCA9IG5ldyBLbmlnaHQgMzRcclxuWi5rbmlnaHRIb3BzID0gbmV3IEtuaWdodEhvcHNcclxuXHJcbnJpdGEgPSA9PlxyXG5cdGJhY2tncm91bmQgJ2dyYXknXHJcblx0dGV4dFNpemUgNTBcclxuXHRpZiBaLnN0YXRlLnZhbHVlPT0wIHRoZW4gb3BzID0gXCJib2FyZCxxdWVlbnNcIi5zcGxpdCAnLCdcclxuXHRpZiBaLnN0YXRlLnZhbHVlPT0xIHRoZW4gb3BzID0gXCJib2FyZCxxdWVlbixxdWVlbkhvcHMsa25pZ2h0LHRhcmdldCxjb3VudHMsa25pZ2h0SG9wc1wiLnNwbGl0ICcsJ1xyXG5cdGlmIFouc3RhdGUudmFsdWU9PTIgdGhlbiBvcHMgPSBcImJvYXJkLHF1ZWVuLHF1ZWVuSG9wcyxrbmlnaHQsY291bnRzXCIuc3BsaXQgJywnXHJcblx0WltvcF0uZHJhdygpIGZvciBvcCBpbiBvcHNcclxuXHJcbndpbmRvdy5tb3VzZVByZXNzZWQgPSA9PlxyXG5cdHN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cdFpbXCJxdWVlbnMsa25pZ2h0SG9wcyxxdWVlblwiLnNwbGl0KCcsJylbWi5zdGF0ZS52YWx1ZV1dLmNsaWNrKClcclxuXHRyaXRhKClcclxuXHRhY2MgKz0gbmV3IERhdGUoKS1zdGFydFxyXG5cdGxvZyBhY2NcclxuXHJcbndpbmRvdy5zZXR1cCA9ID0+XHJcblx0Y3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsIGlubmVySGVpZ2h0XHJcblx0ZnJhbWVSYXRlIDFcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLCBDRU5URVJcclxuXHRyaXRhKClcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4jIHJhbmdlID0gXy5yYW5nZVxyXG4jIGxvZ2cgPSBjb25zb2xlLmxvZ1xyXG4jIGxvZ2cgbmF2aWdhdG9yLnVzZXJBZ2VudFxyXG4jIG9zID0gaWYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyAnV2luZG93cycgdGhlbiAnV2luZG93cycgZWxzZSAnTWFjJ1xyXG5cclxuIyBhdWRpbyA9IG5ldyBBdWRpbyAnc2hvcnRjbGljay5tcDMnXHJcblxyXG4jIGludHJvID0gW1wiU2VsZWN0IGEgcXVlZW5cIl1cclxuXHJcbiMgc3VtID0gKGFycilcdD0+IGFyci5yZWR1Y2UoKChhLCBiKSA9PiBhICsgYiksIDApXHJcblxyXG4jIE5PUVVFRU4gPSBbMyw0LDEwLDEzLDE3LDE4LDE5LDIwLDIxLDIyLDI0LDI2LDI5LDMxLDMyLDM0LDM3LDM5LDQxLDQyLDQzLDQ0LDQ1LDQ2LDUwLDUzLDU5LDYwXVxyXG4jIE4gPSA4XHJcbiMgVyA9IDBcclxuIyBIID0gMFxyXG4jIFIgPSBXLy8xMFxyXG4jIGMgPSAobikgPT4gbiAlJSBOXHJcbiMgciA9IChuKSA9PiBuIC8vIE5cclxuIyByZWN0cyA9IFtdXHJcblxyXG4jIFF1ZWVuID0gJ+KZmydcclxuIyBLbmlnaHQgPSAn4pmYJ1xyXG4jIHF1ZWVuID0gMFxyXG4jIHF1ZWVuSG9wcyA9IFtdICMgaW5kZXhlcyBvZiBzcXVhcmVzIHRha2VuIGJ5IHF1ZWVuXHJcbiMgdGFyZ2V0cyA9IFtdICMgaW5kZXhlcyBvZiBzcXVhcmVzIHRoYXQga25pZ2h0IG11c3QgdmlzaXRcclxuIyBzdGF0ZSA9IDBcclxuIyBtYXJnaW54ID0gMFxyXG4jIG1hcmdpbnkgPSAwXHJcblxyXG4jIG1ha2VLbmlnaHRIb3BzID0gKGtuaWdodCkgPT5cclxuIyBcdGlmIGtuaWdodD09LTEgdGhlbiByZXR1cm4gW11cclxuIyBcdHJlcyA9IFtdXHJcbiMgXHRjb2wgPSBjIGtuaWdodFxyXG4jIFx0cm93ID0gciBrbmlnaHRcclxuIyBcdGZvciBkYyBpbiBbLTIsLTEsMSwyXVxyXG4jIFx0XHRmb3IgZHIgaW4gWy0yLC0xLDEsMl1cclxuIyBcdFx0XHRpZiBhYnMoZGMpID09IGFicyhkcikgdGhlbiBjb250aW51ZVxyXG4jIFx0XHRcdGMyID0gY29sICsgZGNcclxuIyBcdFx0XHRyMiA9IHJvdyArIGRyXHJcbiMgXHRcdFx0aW5kZXggPSBjMis4KnIyXHJcbiMgXHRcdFx0aWYgYzIgaW4gcmFuZ2UoOCkgYW5kIHIyIGluIHJhbmdlKDgpIGFuZCBpbmRleCBpbiB0YXJnZXRzIHRoZW4gcmVzLnB1c2ggaW5kZXhcclxuIyBcdHJlcy5zb3J0IChhLGIpIC0+IGEtYlxyXG4jIFx0cmVzXHJcblxyXG4jIGtuaWdodCA9IDBcclxuIyBrbmlnaHRIb3BzID0gW11cclxuIyBjbGlja3MgPSAwXHJcbiMgY291bnRzID0gW11cdCMgbnVtYmVyIG9mIGNsaWNrcyBmb3IgZWFjaCB0YXJnZXRcclxuIyB0YWtlbiA9IDBcclxuIyByZXN1bHRzID0gWydNb3ZlIHRoZSBrbmlnaHQgdG8gdGhlIHllbGxvdyByaW5nJ11cclxuXHJcbiMgc3RhcnQgPSAwXHJcblxyXG4jIHdpbmRvdy5vbnJlc2l6ZSA9IC0+IHJlU2l6ZSgpXHJcblxyXG4jIHJlU2l6ZSA9IC0+XHJcbiMgXHRIID0gbWluKGlubmVySGVpZ2h0Ly8xMSxpbm5lcldpZHRoLy85KVxyXG4jIFx0VyA9IEhcclxuIyBcdFIgPSBXLy8xMFxyXG4jIFx0cmVzaXplQ2FudmFzIGlubmVyV2lkdGgsIGlubmVySGVpZ2h0XHJcbiMgXHRyZWN0cyA9IFtdXHJcbiMgXHRtYXJnaW54ID0gKGlubmVyV2lkdGgtMTAqVykvMiArIFcvLzNcclxuIyBcdG1hcmdpbnkgPSBIXHJcbiMgXHRmb3IgaW5kZXggaW4gcmFuZ2UgTipOXHJcbiMgXHRcdHJpID0gciBpbmRleFxyXG4jIFx0XHRjaSA9IGMgaW5kZXhcclxuIyBcdFx0Y29sID0gaWYgKHJpICsgY2kpICUgMiB0aGVuICdsaWdodGdyYXknIGVsc2UgJ2RhcmtncmF5J1xyXG4jIFx0XHR4ID0gMypXLzIgKyBXICogYyBpbmRleFxyXG4jIFx0XHR5ID0gSCAqICg3LXIgaW5kZXgpXHJcbiMgXHRcdHJlY3RzLnB1c2ggbmV3IFJlY3QgaW5kZXgsIG1hcmdpbngreCwgbWFyZ2lueSt5LCBXLEgsIGNvbFxyXG4jIFx0cmVjdHMucHVzaCBuZXcgUmVjdCA2NCwgbWFyZ2lueCtXKjAuNiwgbWFyZ2lueSs4KkgsIDAuOCpXLDAuOCpILCBjb2xcclxuXHJcblxyXG4jIHBsYWNlUXVlZW4gPSAoaW5kZXgpID0+XHJcbiMgXHRsb2dnICdRJyArIFBvc2l0aW9uIGluZGV4XHJcbiMgXHRpZiBOT1FVRUVOLmluY2x1ZGVzIGluZGV4XHJcbiMgXHRcdGxvZ2cgJ05vIHF1ZWVuIGhlcmUnXHJcbiMgXHRcdHJldHVyblxyXG5cclxuIyBcdHF1ZWVuID0gaW5kZXhcclxuIyBcdG1ha2VRdWVlbkhvcHMoKVxyXG4jIFx0dGFyZ2V0cyA9IHJhbmdlKE4qTikuZmlsdGVyIChpKSA9PiBub3QgcXVlZW5Ib3BzLmluY2x1ZGVzIGlcclxuIyBcdHRhcmdldHMuc29ydCAoYSxiKSAtPiBiLWFcclxuIyBcdGtuaWdodCA9IHRhcmdldHNbMF1cclxuIyBcdGtuaWdodEhvcHMgPSBtYWtlS25pZ2h0SG9wcyBrbmlnaHRcclxuIyBcdGNvdW50cyA9IFtdXHJcbiMgXHR0YWtlbisrXHJcbiMgXHRzdGF0ZSsrXHJcblxyXG4jIG5ld0dhbWUgPSAoKSAtPlxyXG4jIFx0cXVlZW4gPSAwXHJcbiMgXHRxdWVlbkhvcHMgPSBbXVxyXG4jIFx0a25pZ2h0SG9wcyA9IFtdXHJcbiMgXHR0YXJnZXRzID0gW11cclxuIyBcdHN0YXRlID0gMFxyXG4jIFx0a25pZ2h0ID0gMFxyXG4jIFx0Y2xpY2tzID0gMFxyXG4jIFx0Y291bnRzID0gW11cclxuIyBcdHRha2VuID0gMFxyXG4jIFx0c3RhcnQgPSBuZXcgRGF0ZSgpXHJcblxyXG4jIG1vdmVLbmlnaHQgPSAoaW5kZXgpID0+XHJcbiMgXHRpZiBxdWVlbkhvcHMuaW5jbHVkZXMgaW5kZXggdGhlbiByZXR1cm5cclxuIyBcdGNvbCA9IGMgaW5kZXhcclxuIyBcdHJvdyA9IHIgaW5kZXhcclxuIyBcdGR4ID0gYWJzIGNvbCAtIGMga25pZ2h0XHJcbiMgXHRkeSA9IGFicyByb3cgLSByIGtuaWdodFxyXG4jIFx0aWYgaW5kZXggaW4ga25pZ2h0SG9wc1xyXG4jIFx0XHRhdWRpby5wbGF5KClcclxuIyBcdFx0a25pZ2h0ID0gaW5kZXhcclxuIyBcdFx0a25pZ2h0SG9wcyA9IG1ha2VLbmlnaHRIb3BzIGtuaWdodFxyXG4jIFx0XHRjbGlja3MrK1xyXG4jIFx0XHRpZiB0YXJnZXRzW3Rha2VuXSA9PSBrbmlnaHRcclxuIyBcdFx0XHR0YWtlbisrXHJcbiMgXHRcdFx0Y291bnRzLnB1c2ggY2xpY2tzXHJcbiMgXHRcdFx0Y2xpY2tzID0gMFxyXG4jIFx0aWYgdGFrZW4gPT0gdGFyZ2V0cy5sZW5ndGhcclxuIyBcdFx0cmVzdWx0cyA9IFtcIlEje1Bvc2l0aW9uIHF1ZWVufTogI3tzdW0oY291bnRzKX0gbW92ZXMgdG9vayAjeyhuZXcgRGF0ZSgpLXN0YXJ0KS8xMDAwfSBzZWNvbmRzXCIsXCJDbGljayBPa1wiXVxyXG4jIFx0XHRrbmlnaHRIb3BzID0gW11cclxuIyBcdFx0c3RhdGUgPSAyXHJcblxyXG4jIGNsYXNzIFJlY3RcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBpbmRleCwgQHgsQHksIEB3LEBoLCBAY29sKSAtPlxyXG4jIFx0ZHJhdyA6IC0+XHJcbiMgXHRcdGZpbGwgQGNvbFxyXG4jIFx0XHRyZWN0IEB4LCBAeSwgQHcsIEBoXHJcbiMgXHRcdGlmIEBpbmRleCA9PSA2NFxyXG4jIFx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG4jIFx0XHRcdHRleHRTaXplIDAuNSpXXHJcbiMgXHRcdFx0dGV4dCBcIk9rXCIsIEB4LCBAeVxyXG4jIFx0aW5zaWRlIDogKHgsIHkpIC0+IGFicyh4LUB4KSA8PSBXLzIgYW5kIGFicyh5LUB5KSA8PSBILzJcclxuIyBcdGNsaWNrIDogLT4gXHJcbiMgXHRcdCMgYXVkaW8ucGF1c2UoKVxyXG4jIFx0XHRpZiBzdGF0ZT09MCB0aGVuIHBsYWNlUXVlZW4gQGluZGV4XHJcbiMgXHRcdGVsc2UgaWYgc3RhdGU9PTEgdGhlbiBtb3ZlS25pZ2h0IEBpbmRleFxyXG4jIFx0XHRlbHNlIGlmIHN0YXRlPT0yIHRoZW4gbmV3R2FtZSgpXHJcbiMgXHRkcmF3UGllY2UgOiAobmFtZSkgLT5cclxuIyBcdFx0dGV4dFNpemUgMS4xICogV1xyXG4jIFx0XHRmaWxsIFwiYmxhY2tcIlxyXG4jIFx0XHRpZiBvcz09J1dpbmRvd3MnIHRoZW4gdGV4dCBuYW1lLEB4LEB5KzAuMSpIXHJcbiMgXHRcdGlmIG9zIT0nV2luZG93cycgdGhlbiB0ZXh0IG5hbWUsQHgsQHkrMC4wKkhcclxuIyBcdGRyYXdRdWVlbkhvcCAgOiAtPiBpZiByKHF1ZWVuKSUyPT0wIGFuZCBAaW5kZXghPXF1ZWVuIGFuZCBAaW5kZXggaW4gcXVlZW5Ib3BzIHRoZW4gZWxsaXBzZSBAeCwgQHksIDMqUlxyXG4jIFx0ZHJhd0tuaWdodEhvcCA6IC0+IGlmIGMocXVlZW4pJTI9PTAgYW5kIEBpbmRleCBpbiBrbmlnaHRIb3BzIHRoZW4gZWxsaXBzZSBAeCwgQHksIDMqUlxyXG4jIFx0dGV4dCA6ICh0eHQpIC0+XHJcbiMgXHRcdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG4jIFx0XHR0ZXh0U2l6ZSAwLjUqV1xyXG4jIFx0XHRmaWxsICdibGFjaydcclxuIyBcdFx0dGV4dCB0eHQsIEB4LCBAeVxyXG4jIFx0cmluZyA6ID0+XHJcbiMgXHRcdG5vRmlsbCgpXHJcbiMgXHRcdHB1c2goKVxyXG4jIFx0XHRzdHJva2VXZWlnaHQgM1xyXG4jIFx0XHRzdHJva2UgJ3llbGxvdydcclxuIyBcdFx0ZWxsaXBzZSBAeCwgQHksIDUqUlxyXG4jIFx0XHRwb3AoKVxyXG5cclxuIyBzZXR1cCA9ID0+XHJcbiMgXHRyZVNpemUoKVxyXG4jIFx0bmV3R2FtZSgpXHJcbiMgXHRyZWN0TW9kZSBDRU5URVJcclxuIyBcdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG4jIFx0Y3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsIGlubmVySGVpZ2h0XHJcblxyXG4jIFBvc2l0aW9uID0gKGluZGV4KSAtPiBcImFiY2RlZmdoXCJbYyBpbmRleF0gKyBcIjEyMzQ1Njc4XCJbciBpbmRleF1cclxuXHJcbiMgaW5mbyA9IC0+XHJcbiMgXHRmaWxsICdibGFjaydcclxuIyBcdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG4jIFx0dGV4dFNpemUgMC41KldcclxuIyBcdHRlbXAgPSBpZiBzdGF0ZT09MCB0aGVuIGludHJvIGVsc2UgcmVzdWx0c1xyXG4jIFx0Zm9yIHJlc3VsdCxpIGluIHRlbXBcclxuIyBcdFx0dGV4dCByZXN1bHQsaW5uZXJXaWR0aC8vMiwgMTAqSCArIGkqSC8yXHJcblxyXG4jIGRyYXdCb2FyZCA9ID0+XHJcbiMgXHRuID0gWzY0LDY0LDY1XVtzdGF0ZV1cclxuIyBcdHJlY3QuZHJhdygpIGZvciByZWN0IGluIHJlY3RzLnNsaWNlIDAsblxyXG5cclxuIyBzaG93TGl0dGVyYSA9IChmbGFnKSA9PlxyXG4jIFx0Y29sMSA9IFwiYmxhY2tcIlxyXG4jIFx0Y29sMiA9IFwid2hpdGVcIlxyXG4jIFx0dGV4dFNpemUgMC41KldcclxuIyBcdGZvciBpIGluIHJhbmdlIE5cclxuIyBcdFx0eCA9IFcqKDEuNStpKSArIG1hcmdpbnhcclxuIyBcdFx0eSA9IFcqKE4tMS1pKSArIG1hcmdpbnlcclxuIyBcdFx0Y29sMyA9IGlmIGZsYWcgdGhlbiBbY29sMixjb2wxXVtpJTJdIGVsc2UgY29sMVxyXG4jIFx0XHRub0ZpbGwoKVxyXG4jIFx0XHRpZiBmbGFnIGFuZCBpJTI9PTAgdGhlbiBjaXJjbGUgeCwgVyooTisxKSwgMC42KldcclxuIyBcdFx0ZmlsbCBjb2wxXHJcbiMgXHRcdGlmIGZsYWcgYW5kIGklMj09MCB0aGVuIGNpcmNsZSBtYXJnaW54K1cvMiwgeSwwLjYqV1xyXG4jIFx0XHR0ZXh0IFwiYWJjZGVmZ2hcIltpXSwgeCwgVyooTisxKVxyXG4jIFx0XHRpZiBpJTI9PTAgdGhlbiBmaWxsIGNvbDMgZWxzZSBmaWxsIGNvbDFcclxuIyBcdFx0dGV4dCBcIjEyMzQ1Njc4XCJbaV0sIG1hcmdpbngrVy8yLCB5XHJcblxyXG4jIGRyYXcgPSA9PlxyXG4jIFx0YmFja2dyb3VuZCAxMjhcclxuIyBcdGRyYXdCb2FyZCgpXHJcbiMgXHRzaG93TGl0dGVyYSBzdGF0ZT09MFxyXG4jIFx0aW5mbygpXHJcblxyXG4jIFx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcbiMgXHRpZiBzdGF0ZSA9PSAxXHJcbiMgXHRcdHJlY3RzW3F1ZWVuXS5kcmF3UGllY2UgUXVlZW5cclxuIyBcdFx0cmVjdHNba25pZ2h0XS5kcmF3UGllY2UgS25pZ2h0XHJcblxyXG4jIFx0dGV4dFNpemUgMC41NSpXXHJcbiMgXHRmb3IgaSBpbiByYW5nZSB0YWtlblxyXG4jIFx0XHRpZiB0YXJnZXRzW2ldICE9IGtuaWdodFxyXG4jIFx0XHRcdHJlY3RzW3RhcmdldHNbaV1dLnRleHQgY291bnRzW2ldXHJcblxyXG4jIFx0ZmlsbCAnYmxhY2snXHJcbiMgXHRmb3IgaSBpbiBxdWVlbkhvcHNcclxuIyBcdFx0cmVjdHNbaV0uZHJhd1F1ZWVuSG9wKClcclxuXHJcbiMgXHRmaWxsICd3aGl0ZSdcclxuIyBcdGZvciBpIGluIGtuaWdodEhvcHNcclxuIyBcdFx0cmVjdHNbaV0uZHJhd0tuaWdodEhvcCgpXHJcblxyXG4jIFx0aWYgc3RhdGUgPT0gMFxyXG4jIFx0XHRmb3IgaSBpbiByYW5nZShOKk4pXHJcbiMgXHRcdFx0aWYgbm90IE5PUVVFRU4uaW5jbHVkZXMgaVxyXG4jIFx0XHRcdFx0cmVjdHNbaV0uZHJhd1BpZWNlKFF1ZWVuKVxyXG5cclxuIyBcdGlmIHN0YXRlID09IDFcclxuIyBcdFx0cmVjdHNbdGFyZ2V0c1t0YWtlbl1dLnJpbmcoKVxyXG5cclxuIyBcdGlmIHN0YXRlID09IDJcclxuIyBcdFx0cmVjdHNbcXVlZW5dLmRyYXdQaWVjZSBRdWVlblxyXG4jIFx0XHRyZWN0c1trbmlnaHRdLmRyYXdQaWVjZSBLbmlnaHRcclxuXHJcbiMgbW91c2VQcmVzc2VkID0gLT5cclxuIyBcdGlmIHN0YXRlID09IDJcclxuIyBcdFx0cmVjdCA9IHJlY3RzWzY0XVxyXG4jIFx0XHRpZiByZWN0Lmluc2lkZSBtb3VzZVgsIG1vdXNlWSB0aGVuIHJlY3QuY2xpY2soKVxyXG4jIFx0XHQjIG5ld0dhbWUoKVxyXG4jIFx0XHQjIHJldHVyblxyXG4jIFx0ZWxzZVxyXG4jIFx0XHRmb3IgcmVjdCBpbiByZWN0c1xyXG4jIFx0XHRcdGlmIHJlY3QuaW5zaWRlIG1vdXNlWCwgbW91c2VZIHRoZW4gcmVjdC5jbGljaygpXHJcbiJdfQ==
//# sourceURL=c:\github\2023-008-KnightMoves-p5-solid\coffee\sketch1.coffee