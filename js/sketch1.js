// Generated by CoffeeScript 2.5.1
  // p5 
  // solid

// Använd solid för att hålla datastrukturen uppdaterad.
  // Använd p5 för att rita upp den.
var Board, Count, Counts, Knight, KnightHops, N, NOQUEENS, Queen, QueenHops, Queens, S, State, Target, Targets, acc, board, c, count, counts, inside, knight, knightHops, queen, queenHops, queens, r, rita, setBoard, setCount, setCounts, setKnight, setKnightHops, setQueen, setQueenHops, setQueens, setState, setTarget, setTargets, state, target, targets,
  indexOf = [].indexOf;

import {
  log,
  range,
  signal
} from '../js/utils.js';

S = 50;

N = 8;

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

NOQUEENS = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

acc = 0;

Board = class Board {
  constructor() {
    this.draw = this.draw.bind(this);
    this.values = _.map(range(N * N), (i) => {
      return {
        i,
        ri: r(i),
        ci: c(i)
      };
    });
  }

  draw() {
    var ci, i, j, len, ref, results, ri;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ({i, ri, ci} = ref[j]);
      fill((ri + ci) % 2 ? 'darkgray' : 'lightgray');
      results.push(rect(S * ci, S * ri, S, S));
    }
    return results;
  }

};

Count = class Count {
  constructor() {
    this.update = this.update.bind(this);
    this.value = 0;
  }

  update() {
    return this.value++;
  }

};

Counts = class Counts {
  constructor() {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.values = [];
  }

  draw() {
    var col, i, ix, j, len, ref, results, row;
    fill('black');
    textSize(0.5 * S);
    ref = range(this.values.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      ix = targets().values[i];
      col = c(ix);
      row = r(ix);
      results.push(text(this.values[i], S / 2 + S * col, S / 2 + S * row + 0.05 * S));
    }
    return results;
  }

  update() {
    this.values.push(count().value + 1);
    return setCount(new Count());
  }

};

Knight = class Knight {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return text('♘', S / 2 + S * c(this.value), S / 2 + S * r(this.value) + 0.1 * S);
  }

};

KnightHops = class KnightHops {
  constructor() {
    var c2, col, dc, dr, index, j, k, l, len, len1, r2, ref, ref1, row, ts;
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    k = knight().value;
    ts = targets().values;
    if (k === -1) {
      return [];
    }
    this.values = [];
    col = c(k);
    row = r(k);
    ref = [-2, -1, 1, 2];
    for (j = 0, len = ref.length; j < len; j++) {
      dc = ref[j];
      ref1 = [-2, -1, 1, 2];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        dr = ref1[l];
        if (Math.abs(dc) === Math.abs(dr)) {
          continue;
        }
        c2 = col + dc;
        r2 = row + dr;
        index = c2 + N * r2;
        if (indexOf.call(range(N), c2) >= 0 && indexOf.call(range(N), r2) >= 0 && indexOf.call(ts, index) >= 0) {
          this.values.push(index);
        }
      }
    }
    this.values.sort(function(a, b) {
      return a - b;
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('white');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        setKnight(new Knight(index));
        setKnightHops(new KnightHops());
        if (index === target().value) {
          counts().update();
          target().update(targets().values[counts().values.length + 1]);
          if (counts().values.length === targets().values.length - 1) {
            results.push(setState(new State(2)));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(count().update());
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Queen = class Queen {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    return text('♛', S / 2 + S * c(this.value), S / 2 + S * r(this.value) + 0.1 * S);
  }

  click() {
    if (inside(this.value)) {
      return setState(new State(0));
    }
  }

};

Queens = class Queens {
  constructor() {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.values = _.filter(range(N * N), function(i) {
      return !NOQUEENS.includes(i);
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(text('♛', S / 2 + S * c(i), S / 2 + S * r(i)));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        setCount(new Count());
        setCounts(new Counts());
        setQueen(new Queen(index));
        setQueenHops(new QueenHops());
        setTargets(new Targets());
        setKnight(new Knight(targets().values[counts().values.length]));
        setTarget(new Target(targets().values[counts().values.length + 1]));
        setKnightHops(new KnightHops());
        results.push(setState(new State(1)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

QueenHops = class QueenHops {
  constructor() {
    var f;
    this.draw = this.draw.bind(this);
    this.queen = queen().value;
    f = (i) => {
      var ci, dc, dr, ri;
      ci = c(i);
      ri = r(i);
      dc = Math.abs(ci - this.cq);
      dr = Math.abs(ri - this.rq);
      return ci === this.cq || ri === this.rq || dc === dr;
    };
    this.cq = c(this.queen);
    this.rq = r(this.queen);
    this.values = _.filter(range(N * N), f);
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i !== this.queen) {
        results.push(circle(S / 2 + S * c(i), S / 2 + S * r(i), S / 4)); //, S/2
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

State = class State {
  constructor(value) {
    this.value = value;
  }

};

Target = class Target {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.value = value;
  }

  draw() {
    push();
    stroke('yellow');
    strokeWeight(3);
    noFill();
    circle(S / 2 + S * c(this.value), S / 2 + S * r(this.value), S / 2);
    return pop();
  }

  update() {
    return this.value = targets().values[counts().values.length + 1];
  }

};

Targets = class Targets {
  constructor() {
    this.values = range(N * N).filter((i) => {
      return indexOf.call(queenHops().values, i) < 0;
    });
  }

};

inside = function(index) {
  var ci, ri;
  ci = c(index);
  ri = r(index);
  return (S * ci < mouseX && mouseX < S * ci + S) && (S * ri < mouseY && mouseY < S * ri + S);
};

[count, setCount] = signal(new Count());

[counts, setCounts] = signal(new Counts());

[state, setState] = signal(new State(0));

[board, setBoard] = signal(new Board());

[queen, setQueen] = signal(new Queen(0));

[queens, setQueens] = signal(new Queens());

[queenHops, setQueenHops] = signal(new QueenHops());

[targets, setTargets] = signal(new Targets());

[target, setTarget] = signal(new Target(targets().values[1]));

[knight, setKnight] = signal(new Knight(34));

[knightHops, setKnightHops] = signal(new KnightHops());

rita = () => {
  var j, len, op, ops, results;
  background('gray');
  textSize(50);
  if (state().value === 0) {
    ops = [board, queens];
  }
  if (state().value === 1) {
    ops = [board, queen, queenHops, knight, target, counts, knightHops];
  }
  if (state().value === 2) {
    ops = [board, queen, queenHops, knight, counts];
  }
  results = [];
  for (j = 0, len = ops.length; j < len; j++) {
    op = ops[j];
    results.push(op().draw());
  }
  return results;
};

window.mousePressed = () => {
  var start;
  start = new Date();
  [queens, knightHops, queen][state().value]().click();
  rita();
  acc += new Date() - start;
  return log(acc);
};

window.setup = () => {
  createCanvas(innerWidth, innerHeight);
  frameRate(1);
  textAlign(CENTER, CENTER);
  return rita();
};

//#####################################

// range = _.range
// logg = console.log
// logg navigator.userAgent
// os = if navigator.userAgent.includes 'Windows' then 'Windows' else 'Mac'

// audio = new Audio 'shortclick.mp3'

// intro = ["Select a queen"]

// sum = (arr)	=> arr.reduce(((a, b) => a + b), 0)

// NOQUEEN = [3,4,10,13,17,18,19,20,21,22,24,26,29,31,32,34,37,39,41,42,43,44,45,46,50,53,59,60]
// N = 8
// W = 0
// H = 0
// R = W//10
// c = (n) => n %% N
// r = (n) => n // N
// rects = []

// Queen = '♛'
// Knight = '♘'
// queen = 0
// queenHops = [] # indexes of squares taken by queen
// targets = [] # indexes of squares that knight must visit
// state = 0
// marginx = 0
// marginy = 0

// makeKnightHops = (knight) =>
// 	if knight==-1 then return []
// 	res = []
// 	col = c knight
// 	row = r knight
// 	for dc in [-2,-1,1,2]
// 		for dr in [-2,-1,1,2]
// 			if abs(dc) == abs(dr) then continue
// 			c2 = col + dc
// 			r2 = row + dr
// 			index = c2+8*r2
// 			if c2 in range(8) and r2 in range(8) and index in targets then res.push index
// 	res.sort (a,b) -> a-b
// 	res

// knight = 0
// knightHops = []
// clicks = 0
// counts = []	# number of clicks for each target
// taken = 0
// results = ['Move the knight to the yellow ring']

// start = 0

// window.onresize = -> reSize()

// reSize = ->
// 	H = min(innerHeight//11,innerWidth//9)
// 	W = H
// 	R = W//10
// 	resizeCanvas innerWidth, innerHeight
// 	rects = []
// 	marginx = (innerWidth-10*W)/2 + W//3
// 	marginy = H
// 	for index in range N*N
// 		ri = r index
// 		ci = c index
// 		col = if (ri + ci) % 2 then 'lightgray' else 'darkgray'
// 		x = 3*W/2 + W * c index
// 		y = H * (7-r index)
// 		rects.push new Rect index, marginx+x, marginy+y, W,H, col
// 	rects.push new Rect 64, marginx+W*0.6, marginy+8*H, 0.8*W,0.8*H, col

// placeQueen = (index) =>
// 	logg 'Q' + Position index
// 	if NOQUEEN.includes index
// 		logg 'No queen here'
// 		return

// 	queen = index
// 	makeQueenHops()
// 	targets = range(N*N).filter (i) => not queenHops.includes i
// 	targets.sort (a,b) -> b-a
// 	knight = targets[0]
// 	knightHops = makeKnightHops knight
// 	counts = []
// 	taken++
// 	state++

// newGame = () ->
// 	queen = 0
// 	queenHops = []
// 	knightHops = []
// 	targets = []
// 	state = 0
// 	knight = 0
// 	clicks = 0
// 	counts = []
// 	taken = 0
// 	start = new Date()

// moveKnight = (index) =>
// 	if queenHops.includes index then return
// 	col = c index
// 	row = r index
// 	dx = abs col - c knight
// 	dy = abs row - r knight
// 	if index in knightHops
// 		audio.play()
// 		knight = index
// 		knightHops = makeKnightHops knight
// 		clicks++
// 		if targets[taken] == knight
// 			taken++
// 			counts.push clicks
// 			clicks = 0
// 	if taken == targets.length
// 		results = ["Q#{Position queen}: #{sum(counts)} moves took #{(new Date()-start)/1000} seconds","Click Ok"]
// 		knightHops = []
// 		state = 2

// class Rect
// 	constructor : (@index, @x,@y, @w,@h, @col) ->
// 	draw : ->
// 		fill @col
// 		rect @x, @y, @w, @h
// 		if @index == 64
// 			fill 'black'
// 			textSize 0.5*W
// 			text "Ok", @x, @y
// 	inside : (x, y) -> abs(x-@x) <= W/2 and abs(y-@y) <= H/2
// 	click : -> 
// 		# audio.pause()
// 		if state==0 then placeQueen @index
// 		else if state==1 then moveKnight @index
// 		else if state==2 then newGame()
// 	drawPiece : (name) ->
// 		textSize 1.1 * W
// 		fill "black"
// 		if os=='Windows' then text name,@x,@y+0.1*H
// 		if os!='Windows' then text name,@x,@y+0.0*H
// 	drawQueenHop  : -> if r(queen)%2==0 and @index!=queen and @index in queenHops then ellipse @x, @y, 3*R
// 	drawKnightHop : -> if c(queen)%2==0 and @index in knightHops then ellipse @x, @y, 3*R
// 	text : (txt) ->
// 		textAlign CENTER, CENTER
// 		textSize 0.5*W
// 		fill 'black'
// 		text txt, @x, @y
// 	ring : =>
// 		noFill()
// 		push()
// 		strokeWeight 3
// 		stroke 'yellow'
// 		ellipse @x, @y, 5*R
// 		pop()

// setup = =>
// 	reSize()
// 	newGame()
// 	rectMode CENTER
// 	textAlign CENTER, CENTER
// 	createCanvas innerWidth, innerHeight

// Position = (index) -> "abcdefgh"[c index] + "12345678"[r index]

// info = ->
// 	fill 'black'
// 	textAlign CENTER, CENTER
// 	textSize 0.5*W
// 	temp = if state==0 then intro else results
// 	for result,i in temp
// 		text result,innerWidth//2, 10*H + i*H/2

// drawBoard = =>
// 	n = [64,64,65][state]
// 	rect.draw() for rect in rects.slice 0,n

// showLittera = (flag) =>
// 	col1 = "black"
// 	col2 = "white"
// 	textSize 0.5*W
// 	for i in range N
// 		x = W*(1.5+i) + marginx
// 		y = W*(N-1-i) + marginy
// 		col3 = if flag then [col2,col1][i%2] else col1
// 		noFill()
// 		if flag and i%2==0 then circle x, W*(N+1), 0.6*W
// 		fill col1
// 		if flag and i%2==0 then circle marginx+W/2, y,0.6*W
// 		text "abcdefgh"[i], x, W*(N+1)
// 		if i%2==0 then fill col3 else fill col1
// 		text "12345678"[i], marginx+W/2, y

// draw = =>
// 	background 128
// 	drawBoard()
// 	showLittera state==0
// 	info()

// 	textAlign CENTER, CENTER
// 	if state == 1
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// 	textSize 0.55*W
// 	for i in range taken
// 		if targets[i] != knight
// 			rects[targets[i]].text counts[i]

// 	fill 'black'
// 	for i in queenHops
// 		rects[i].drawQueenHop()

// 	fill 'white'
// 	for i in knightHops
// 		rects[i].drawKnightHop()

// 	if state == 0
// 		for i in range(N*N)
// 			if not NOQUEEN.includes i
// 				rects[i].drawPiece(Queen)

// 	if state == 1
// 		rects[targets[taken]].ring()

// 	if state == 2
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// mousePressed = ->
// 	if state == 2
// 		rect = rects[64]
// 		if rect.inside mouseX, mouseY then rect.click()
// 		# newGame()
// 		# return
// 	else
// 		for rect in rects
// 			if rect.inside mouseX, mouseY then rect.click()

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoMS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxza2V0Y2gxLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSWlDOzs7OztBQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxDQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUE7RUFBQTs7QUFFakMsT0FBQTtFQUFRLEdBQVI7RUFBWSxLQUFaO0VBQWtCLE1BQWxCO0NBQUEsTUFBQTs7QUFFQSxDQUFBLEdBQUk7O0FBQ0osQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSSxDQUFDLENBQUQsQ0FBQSxHQUFBO29CQUFPLElBQUs7QUFBWjs7QUFDSixDQUFBLEdBQUksQ0FBQyxDQUFELENBQUEsR0FBQTtTQUFPLENBQUEsR0FBSTtBQUFYOztBQUNKLFFBQUEsR0FBVyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssRUFBTCxFQUFRLEVBQVIsRUFBVyxFQUFYLEVBQWMsRUFBZCxFQUFpQixFQUFqQixFQUFvQixFQUFwQixFQUF1QixFQUF2QixFQUEwQixFQUExQixFQUE2QixFQUE3QixFQUFnQyxFQUFoQyxFQUFtQyxFQUFuQyxFQUFz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QUksSUFBSixDQUFBLENBQUEsR0FBVztTQUNsQixHQUFBLENBQUksR0FBSjtBQUxxQjs7QUFPdEIsTUFBTSxDQUFDLEtBQVAsR0FBZSxDQUFBLENBQUEsR0FBQTtFQUNkLFlBQUEsQ0FBYSxVQUFiLEVBQXlCLFdBQXpCO0VBQ0EsU0FBQSxDQUFVLENBQVY7RUFDQSxTQUFBLENBQVUsTUFBVixFQUFrQixNQUFsQjtTQUNBLElBQUEsQ0FBQTtBQUpjOztBQXRLa0IiLCJzb3VyY2VzQ29udGVudCI6WyIjIHA1IFxyXG4jIHNvbGlkXHJcblxyXG4jIEFudsOkbmQgc29saWQgZsO2ciBhdHQgaMOlbGxhIGRhdGFzdHJ1a3R1cmVuIHVwcGRhdGVyYWQuXHJcbiMgQW52w6RuZCBwNSBmw7ZyIGF0dCByaXRhIHVwcCBkZW4uXHJcblxyXG5pbXBvcnQge2xvZyxyYW5nZSxzaWduYWx9IGZyb20gJy4uL2pzL3V0aWxzLmpzJ1xyXG5cclxuUyA9IDUwXHJcbk4gPSA4XHJcbnIgPSAoaSkgPT4gaSAvLyBOXHJcbmMgPSAoaSkgPT4gaSAlIE5cclxuTk9RVUVFTlMgPSBbMyw0LDEwLDEzLDE3LDE4LDE5LDIwLDIxLDIyLDI0LDI2LDI5LDMxLDMyLDM0LDM3LDM5LDQxLDQyLDQzLDQ0LDQ1LDQ2LDUwLDUzLDU5LDYwXVxyXG5hY2MgPTBcclxuXHJcbmNsYXNzIEJvYXJkXHJcblx0Y29uc3RydWN0b3IgOiAtPiBAdmFsdWVzID0gXy5tYXAgcmFuZ2UoTipOKSwgKGkpID0+IHtpLCByaTpyKGkpLCBjaTpjKGkpfVxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0Zm9yIHtpLHJpLGNpfSBpbiBAdmFsdWVzXHJcblx0XHRcdGZpbGwgaWYgKHJpK2NpKSAlIDIgdGhlbiAnZGFya2dyYXknIGVsc2UgJ2xpZ2h0Z3JheSdcclxuXHRcdFx0cmVjdCBTKmNpLCBTKnJpLCBTLCBTXHJcblxyXG5jbGFzcyBDb3VudFxyXG5cdGNvbnN0cnVjdG9yIDogLT4gQHZhbHVlID0gMFxyXG5cdHVwZGF0ZSA6ID0+IEB2YWx1ZSsrXHJcblxyXG5jbGFzcyBDb3VudHNcclxuXHRjb25zdHJ1Y3RvciA6IC0+IEB2YWx1ZXMgPSBbXVxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0U2l6ZSAwLjUqU1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQHZhbHVlcy5sZW5ndGhcclxuXHRcdFx0aXggPSB0YXJnZXRzKCkudmFsdWVzW2ldXHJcblx0XHRcdGNvbCA9IGMgaXhcclxuXHRcdFx0cm93ID0gciBpeFxyXG5cdFx0XHR0ZXh0IEB2YWx1ZXNbaV0sIFMvMitTKmNvbCwgUy8yK1Mqcm93KzAuMDUqU1xyXG5cdHVwZGF0ZSA6ID0+XHJcblx0XHRAdmFsdWVzLnB1c2ggY291bnQoKS52YWx1ZSArIDFcclxuXHRcdHNldENvdW50IG5ldyBDb3VudFxyXG5cclxuY2xhc3MgS25pZ2h0XHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPlxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0ICfimZgnLCBTLzIrUypjKEB2YWx1ZSksIFMvMitTKnIoQHZhbHVlKSswLjEqU1xyXG5cclxuY2xhc3MgS25pZ2h0SG9wc1xyXG5cdGNvbnN0cnVjdG9yIDogIC0+XHJcblx0XHRrID0ga25pZ2h0KCkudmFsdWVcclxuXHRcdHRzID0gdGFyZ2V0cygpLnZhbHVlc1xyXG5cdFx0aWYgaz09LTEgdGhlbiByZXR1cm4gW11cclxuXHRcdEB2YWx1ZXMgPSBbXVxyXG5cdFx0Y29sID0gYyBrXHJcblx0XHRyb3cgPSByIGtcclxuXHRcdGZvciBkYyBpbiBbLTIsLTEsMSwyXVxyXG5cdFx0XHRmb3IgZHIgaW4gWy0yLC0xLDEsMl1cclxuXHRcdFx0XHRpZiBNYXRoLmFicyhkYykgPT0gTWF0aC5hYnMoZHIpIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRjMiA9IGNvbCArIGRjXHJcblx0XHRcdFx0cjIgPSByb3cgKyBkclxyXG5cdFx0XHRcdGluZGV4ID0gYzIrTipyMlxyXG5cdFx0XHRcdGlmIGMyIGluIHJhbmdlKE4pIGFuZCByMiBpbiByYW5nZShOKSBhbmQgaW5kZXggaW4gdHMgdGhlbiBAdmFsdWVzLnB1c2ggaW5kZXhcclxuXHRcdEB2YWx1ZXMuc29ydCAoYSxiKSAtPiBhLWJcclxuXHRkcmF3IDogPT5cclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0Zm9yIGkgaW4gQHZhbHVlc1xyXG5cdFx0XHRjaXJjbGUgUy8yK1MqYyhpKSwgUy8yK1MqcihpKSwgUy80XHJcblx0Y2xpY2sgOiA9PlxyXG5cdFx0Zm9yIGluZGV4IGluIEB2YWx1ZXNcclxuXHRcdFx0aWYgaW5zaWRlIGluZGV4XHJcblx0XHRcdFx0c2V0S25pZ2h0IG5ldyBLbmlnaHQgaW5kZXhcclxuXHRcdFx0XHRzZXRLbmlnaHRIb3BzIG5ldyBLbmlnaHRIb3BzXHJcblx0XHRcdFx0aWYgaW5kZXggPT0gdGFyZ2V0KCkudmFsdWVcclxuXHRcdFx0XHRcdGNvdW50cygpLnVwZGF0ZSgpXHJcblx0XHRcdFx0XHR0YXJnZXQoKS51cGRhdGUgdGFyZ2V0cygpLnZhbHVlc1tjb3VudHMoKS52YWx1ZXMubGVuZ3RoKzFdXHJcblx0XHRcdFx0XHRpZiBjb3VudHMoKS52YWx1ZXMubGVuZ3RoID09IHRhcmdldHMoKS52YWx1ZXMubGVuZ3RoLTEgdGhlbiBzZXRTdGF0ZSBuZXcgU3RhdGUgMlxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGNvdW50KCkudXBkYXRlKClcclxuXHJcbmNsYXNzIFF1ZWVuXHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPiBcclxuXHRkcmF3IDogPT5cclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0dGV4dCAn4pmbJywgUy8yK1MqYyhAdmFsdWUpLCBTLzIrUypyKEB2YWx1ZSkrMC4xKlNcclxuXHRjbGljayA6ID0+IGlmIGluc2lkZSBAdmFsdWUgdGhlbiBzZXRTdGF0ZSBuZXcgU3RhdGUgMFxyXG5cclxuY2xhc3MgUXVlZW5zXHJcblx0Y29uc3RydWN0b3IgOiAtPiBAdmFsdWVzID0gXy5maWx0ZXIgcmFuZ2UoTipOKSwgKGkpIC0+IG5vdCBOT1FVRUVOUy5pbmNsdWRlcyBpXHJcblx0ZHJhdyA6ID0+XHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdGZvciBpIGluIEB2YWx1ZXNcclxuXHRcdFx0dGV4dCAn4pmbJywgUy8yK1MqYyhpKSwgUy8yK1MqcihpKVxyXG5cdGNsaWNrIDogPT5cclxuXHRcdGZvciBpbmRleCBpbiBAdmFsdWVzXHJcblx0XHRcdGlmIGluc2lkZSBpbmRleFxyXG5cdFx0XHRcdHNldENvdW50IG5ldyBDb3VudFxyXG5cdFx0XHRcdHNldENvdW50cyBuZXcgQ291bnRzXHJcblx0XHRcdFx0c2V0UXVlZW4gbmV3IFF1ZWVuIGluZGV4XHJcblx0XHRcdFx0c2V0UXVlZW5Ib3BzIG5ldyBRdWVlbkhvcHNcclxuXHRcdFx0XHRzZXRUYXJnZXRzIG5ldyBUYXJnZXRzXHJcblx0XHRcdFx0c2V0S25pZ2h0IG5ldyBLbmlnaHQgdGFyZ2V0cygpLnZhbHVlc1tjb3VudHMoKS52YWx1ZXMubGVuZ3RoXVxyXG5cdFx0XHRcdHNldFRhcmdldCBuZXcgVGFyZ2V0IHRhcmdldHMoKS52YWx1ZXNbY291bnRzKCkudmFsdWVzLmxlbmd0aCsxXVxyXG5cdFx0XHRcdHNldEtuaWdodEhvcHMgbmV3IEtuaWdodEhvcHNcclxuXHRcdFx0XHRzZXRTdGF0ZSBuZXcgU3RhdGUgMVxyXG5cclxuY2xhc3MgUXVlZW5Ib3BzXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdFx0QHF1ZWVuID0gIHF1ZWVuKCkudmFsdWVcclxuXHRcdGYgPSAoaSkgPT5cclxuXHRcdFx0Y2kgPSBjIGlcclxuXHRcdFx0cmkgPSByIGlcclxuXHRcdFx0ZGMgPSBNYXRoLmFicyBjaSAtIEBjcVxyXG5cdFx0XHRkciA9IE1hdGguYWJzIHJpIC0gQHJxXHJcblx0XHRcdGNpID09IEBjcSBvciByaSA9PSBAcnEgb3IgZGMgPT0gZHJcclxuXHRcdEBjcSA9IGMgQHF1ZWVuXHJcblx0XHRAcnEgPSByIEBxdWVlblxyXG5cdFx0QHZhbHVlcyA9IF8uZmlsdGVyIHJhbmdlKE4qTiksIGZcclxuXHRkcmF3OiA9PlxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRmb3IgaSBpbiBAdmFsdWVzXHJcblx0XHRcdGlmIGkgIT0gQHF1ZWVuIHRoZW4gY2lyY2xlIFMvMitTKmMoaSksIFMvMitTKnIoaSksIFMvNCAjLCBTLzJcclxuXHJcbmNsYXNzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPlxyXG5cclxuY2xhc3MgVGFyZ2V0XHJcblx0Y29uc3RydWN0b3IgOiAoQHZhbHVlKSAtPlxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0cHVzaCgpXHJcblx0XHRzdHJva2UgJ3llbGxvdydcclxuXHRcdHN0cm9rZVdlaWdodCAzXHJcblx0XHRub0ZpbGwoKVxyXG5cdFx0Y2lyY2xlIFMvMitTKmMoQHZhbHVlKSwgUy8yK1MqcihAdmFsdWUpLCBTLzJcclxuXHRcdHBvcCgpXHJcblx0dXBkYXRlIDogKCkgPT4gQHZhbHVlID0gdGFyZ2V0cygpLnZhbHVlc1tjb3VudHMoKS52YWx1ZXMubGVuZ3RoKzFdXHJcblxyXG5jbGFzcyBUYXJnZXRzXHJcblx0Y29uc3RydWN0b3IgOiAtPiBAdmFsdWVzID0gcmFuZ2UoTipOKS5maWx0ZXIgKGkpID0+IGkgbm90IGluIHF1ZWVuSG9wcygpLnZhbHVlc1xyXG5cclxuaW5zaWRlID0gKGluZGV4KSAtPlxyXG5cdGNpID0gYyBpbmRleFxyXG5cdHJpID0gciBpbmRleFxyXG5cdFMqY2kgPCBtb3VzZVggPCBTKmNpK1MgYW5kIFMqcmkgPCBtb3VzZVkgPCBTKnJpK1NcclxuXHJcbltjb3VudCxzZXRDb3VudF0gPSBzaWduYWwgbmV3IENvdW50XHJcbltjb3VudHMsc2V0Q291bnRzXSA9IHNpZ25hbCBuZXcgQ291bnRzXHJcbltzdGF0ZSwgc2V0U3RhdGVdID0gc2lnbmFsIG5ldyBTdGF0ZSAwXHJcbltib2FyZCwgc2V0Qm9hcmRdID0gc2lnbmFsIG5ldyBCb2FyZFxyXG5bcXVlZW4sIHNldFF1ZWVuXSA9IHNpZ25hbCBuZXcgUXVlZW4gMFxyXG5bcXVlZW5zLCBzZXRRdWVlbnNdID0gc2lnbmFsIG5ldyBRdWVlbnNcclxuW3F1ZWVuSG9wcywgc2V0UXVlZW5Ib3BzXSA9IHNpZ25hbCBuZXcgUXVlZW5Ib3BzXHJcblt0YXJnZXRzLCBzZXRUYXJnZXRzXSA9IHNpZ25hbCBuZXcgVGFyZ2V0c1xyXG5bdGFyZ2V0LCBzZXRUYXJnZXRdID0gc2lnbmFsIG5ldyBUYXJnZXQgdGFyZ2V0cygpLnZhbHVlc1sxXVxyXG5ba25pZ2h0LCBzZXRLbmlnaHRdID0gc2lnbmFsIG5ldyBLbmlnaHQgMzRcclxuW2tuaWdodEhvcHMsIHNldEtuaWdodEhvcHNdID0gc2lnbmFsIG5ldyBLbmlnaHRIb3BzXHJcblxyXG5yaXRhID0gPT5cclxuXHRiYWNrZ3JvdW5kICdncmF5J1xyXG5cdHRleHRTaXplIDUwXHJcblx0aWYgc3RhdGUoKS52YWx1ZT09MCB0aGVuIG9wcyA9IFtib2FyZCxxdWVlbnNdXHJcblx0aWYgc3RhdGUoKS52YWx1ZT09MSB0aGVuIG9wcyA9IFtib2FyZCxxdWVlbixxdWVlbkhvcHMsa25pZ2h0LHRhcmdldCxjb3VudHMsa25pZ2h0SG9wc11cclxuXHRpZiBzdGF0ZSgpLnZhbHVlPT0yIHRoZW4gb3BzID0gW2JvYXJkLHF1ZWVuLHF1ZWVuSG9wcyxrbmlnaHQsY291bnRzXVxyXG5cdG9wKCkuZHJhdygpIGZvciBvcCBpbiBvcHNcclxuXHJcbndpbmRvdy5tb3VzZVByZXNzZWQgPSA9PlxyXG5cdHN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cdFtxdWVlbnMsa25pZ2h0SG9wcyxxdWVlbl1bc3RhdGUoKS52YWx1ZV0oKS5jbGljaygpXHJcblx0cml0YSgpXHJcblx0YWNjICs9IG5ldyBEYXRlKCktc3RhcnRcclxuXHRsb2cgYWNjXHJcblxyXG53aW5kb3cuc2V0dXAgPSA9PlxyXG5cdGNyZWF0ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cdGZyYW1lUmF0ZSAxXHJcblx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcblx0cml0YSgpXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuIyByYW5nZSA9IF8ucmFuZ2VcclxuIyBsb2dnID0gY29uc29sZS5sb2dcclxuIyBsb2dnIG5hdmlnYXRvci51c2VyQWdlbnRcclxuIyBvcyA9IGlmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMgJ1dpbmRvd3MnIHRoZW4gJ1dpbmRvd3MnIGVsc2UgJ01hYydcclxuXHJcbiMgYXVkaW8gPSBuZXcgQXVkaW8gJ3Nob3J0Y2xpY2subXAzJ1xyXG5cclxuIyBpbnRybyA9IFtcIlNlbGVjdCBhIHF1ZWVuXCJdXHJcblxyXG4jIHN1bSA9IChhcnIpXHQ9PiBhcnIucmVkdWNlKCgoYSwgYikgPT4gYSArIGIpLCAwKVxyXG5cclxuIyBOT1FVRUVOID0gWzMsNCwxMCwxMywxNywxOCwxOSwyMCwyMSwyMiwyNCwyNiwyOSwzMSwzMiwzNCwzNywzOSw0MSw0Miw0Myw0NCw0NSw0Niw1MCw1Myw1OSw2MF1cclxuIyBOID0gOFxyXG4jIFcgPSAwXHJcbiMgSCA9IDBcclxuIyBSID0gVy8vMTBcclxuIyBjID0gKG4pID0+IG4gJSUgTlxyXG4jIHIgPSAobikgPT4gbiAvLyBOXHJcbiMgcmVjdHMgPSBbXVxyXG5cclxuIyBRdWVlbiA9ICfimZsnXHJcbiMgS25pZ2h0ID0gJ+KZmCdcclxuIyBxdWVlbiA9IDBcclxuIyBxdWVlbkhvcHMgPSBbXSAjIGluZGV4ZXMgb2Ygc3F1YXJlcyB0YWtlbiBieSBxdWVlblxyXG4jIHRhcmdldHMgPSBbXSAjIGluZGV4ZXMgb2Ygc3F1YXJlcyB0aGF0IGtuaWdodCBtdXN0IHZpc2l0XHJcbiMgc3RhdGUgPSAwXHJcbiMgbWFyZ2lueCA9IDBcclxuIyBtYXJnaW55ID0gMFxyXG5cclxuIyBtYWtlS25pZ2h0SG9wcyA9IChrbmlnaHQpID0+XHJcbiMgXHRpZiBrbmlnaHQ9PS0xIHRoZW4gcmV0dXJuIFtdXHJcbiMgXHRyZXMgPSBbXVxyXG4jIFx0Y29sID0gYyBrbmlnaHRcclxuIyBcdHJvdyA9IHIga25pZ2h0XHJcbiMgXHRmb3IgZGMgaW4gWy0yLC0xLDEsMl1cclxuIyBcdFx0Zm9yIGRyIGluIFstMiwtMSwxLDJdXHJcbiMgXHRcdFx0aWYgYWJzKGRjKSA9PSBhYnMoZHIpIHRoZW4gY29udGludWVcclxuIyBcdFx0XHRjMiA9IGNvbCArIGRjXHJcbiMgXHRcdFx0cjIgPSByb3cgKyBkclxyXG4jIFx0XHRcdGluZGV4ID0gYzIrOCpyMlxyXG4jIFx0XHRcdGlmIGMyIGluIHJhbmdlKDgpIGFuZCByMiBpbiByYW5nZSg4KSBhbmQgaW5kZXggaW4gdGFyZ2V0cyB0aGVuIHJlcy5wdXNoIGluZGV4XHJcbiMgXHRyZXMuc29ydCAoYSxiKSAtPiBhLWJcclxuIyBcdHJlc1xyXG5cclxuIyBrbmlnaHQgPSAwXHJcbiMga25pZ2h0SG9wcyA9IFtdXHJcbiMgY2xpY2tzID0gMFxyXG4jIGNvdW50cyA9IFtdXHQjIG51bWJlciBvZiBjbGlja3MgZm9yIGVhY2ggdGFyZ2V0XHJcbiMgdGFrZW4gPSAwXHJcbiMgcmVzdWx0cyA9IFsnTW92ZSB0aGUga25pZ2h0IHRvIHRoZSB5ZWxsb3cgcmluZyddXHJcblxyXG4jIHN0YXJ0ID0gMFxyXG5cclxuIyB3aW5kb3cub25yZXNpemUgPSAtPiByZVNpemUoKVxyXG5cclxuIyByZVNpemUgPSAtPlxyXG4jIFx0SCA9IG1pbihpbm5lckhlaWdodC8vMTEsaW5uZXJXaWR0aC8vOSlcclxuIyBcdFcgPSBIXHJcbiMgXHRSID0gVy8vMTBcclxuIyBcdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG4jIFx0cmVjdHMgPSBbXVxyXG4jIFx0bWFyZ2lueCA9IChpbm5lcldpZHRoLTEwKlcpLzIgKyBXLy8zXHJcbiMgXHRtYXJnaW55ID0gSFxyXG4jIFx0Zm9yIGluZGV4IGluIHJhbmdlIE4qTlxyXG4jIFx0XHRyaSA9IHIgaW5kZXhcclxuIyBcdFx0Y2kgPSBjIGluZGV4XHJcbiMgXHRcdGNvbCA9IGlmIChyaSArIGNpKSAlIDIgdGhlbiAnbGlnaHRncmF5JyBlbHNlICdkYXJrZ3JheSdcclxuIyBcdFx0eCA9IDMqVy8yICsgVyAqIGMgaW5kZXhcclxuIyBcdFx0eSA9IEggKiAoNy1yIGluZGV4KVxyXG4jIFx0XHRyZWN0cy5wdXNoIG5ldyBSZWN0IGluZGV4LCBtYXJnaW54K3gsIG1hcmdpbnkreSwgVyxILCBjb2xcclxuIyBcdHJlY3RzLnB1c2ggbmV3IFJlY3QgNjQsIG1hcmdpbngrVyowLjYsIG1hcmdpbnkrOCpILCAwLjgqVywwLjgqSCwgY29sXHJcblxyXG5cclxuIyBwbGFjZVF1ZWVuID0gKGluZGV4KSA9PlxyXG4jIFx0bG9nZyAnUScgKyBQb3NpdGlvbiBpbmRleFxyXG4jIFx0aWYgTk9RVUVFTi5pbmNsdWRlcyBpbmRleFxyXG4jIFx0XHRsb2dnICdObyBxdWVlbiBoZXJlJ1xyXG4jIFx0XHRyZXR1cm5cclxuXHJcbiMgXHRxdWVlbiA9IGluZGV4XHJcbiMgXHRtYWtlUXVlZW5Ib3BzKClcclxuIyBcdHRhcmdldHMgPSByYW5nZShOKk4pLmZpbHRlciAoaSkgPT4gbm90IHF1ZWVuSG9wcy5pbmNsdWRlcyBpXHJcbiMgXHR0YXJnZXRzLnNvcnQgKGEsYikgLT4gYi1hXHJcbiMgXHRrbmlnaHQgPSB0YXJnZXRzWzBdXHJcbiMgXHRrbmlnaHRIb3BzID0gbWFrZUtuaWdodEhvcHMga25pZ2h0XHJcbiMgXHRjb3VudHMgPSBbXVxyXG4jIFx0dGFrZW4rK1xyXG4jIFx0c3RhdGUrK1xyXG5cclxuIyBuZXdHYW1lID0gKCkgLT5cclxuIyBcdHF1ZWVuID0gMFxyXG4jIFx0cXVlZW5Ib3BzID0gW11cclxuIyBcdGtuaWdodEhvcHMgPSBbXVxyXG4jIFx0dGFyZ2V0cyA9IFtdXHJcbiMgXHRzdGF0ZSA9IDBcclxuIyBcdGtuaWdodCA9IDBcclxuIyBcdGNsaWNrcyA9IDBcclxuIyBcdGNvdW50cyA9IFtdXHJcbiMgXHR0YWtlbiA9IDBcclxuIyBcdHN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cclxuIyBtb3ZlS25pZ2h0ID0gKGluZGV4KSA9PlxyXG4jIFx0aWYgcXVlZW5Ib3BzLmluY2x1ZGVzIGluZGV4IHRoZW4gcmV0dXJuXHJcbiMgXHRjb2wgPSBjIGluZGV4XHJcbiMgXHRyb3cgPSByIGluZGV4XHJcbiMgXHRkeCA9IGFicyBjb2wgLSBjIGtuaWdodFxyXG4jIFx0ZHkgPSBhYnMgcm93IC0gciBrbmlnaHRcclxuIyBcdGlmIGluZGV4IGluIGtuaWdodEhvcHNcclxuIyBcdFx0YXVkaW8ucGxheSgpXHJcbiMgXHRcdGtuaWdodCA9IGluZGV4XHJcbiMgXHRcdGtuaWdodEhvcHMgPSBtYWtlS25pZ2h0SG9wcyBrbmlnaHRcclxuIyBcdFx0Y2xpY2tzKytcclxuIyBcdFx0aWYgdGFyZ2V0c1t0YWtlbl0gPT0ga25pZ2h0XHJcbiMgXHRcdFx0dGFrZW4rK1xyXG4jIFx0XHRcdGNvdW50cy5wdXNoIGNsaWNrc1xyXG4jIFx0XHRcdGNsaWNrcyA9IDBcclxuIyBcdGlmIHRha2VuID09IHRhcmdldHMubGVuZ3RoXHJcbiMgXHRcdHJlc3VsdHMgPSBbXCJRI3tQb3NpdGlvbiBxdWVlbn06ICN7c3VtKGNvdW50cyl9IG1vdmVzIHRvb2sgI3sobmV3IERhdGUoKS1zdGFydCkvMTAwMH0gc2Vjb25kc1wiLFwiQ2xpY2sgT2tcIl1cclxuIyBcdFx0a25pZ2h0SG9wcyA9IFtdXHJcbiMgXHRcdHN0YXRlID0gMlxyXG5cclxuIyBjbGFzcyBSZWN0XHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAaW5kZXgsIEB4LEB5LCBAdyxAaCwgQGNvbCkgLT5cclxuIyBcdGRyYXcgOiAtPlxyXG4jIFx0XHRmaWxsIEBjb2xcclxuIyBcdFx0cmVjdCBAeCwgQHksIEB3LCBAaFxyXG4jIFx0XHRpZiBAaW5kZXggPT0gNjRcclxuIyBcdFx0XHRmaWxsICdibGFjaydcclxuIyBcdFx0XHR0ZXh0U2l6ZSAwLjUqV1xyXG4jIFx0XHRcdHRleHQgXCJPa1wiLCBAeCwgQHlcclxuIyBcdGluc2lkZSA6ICh4LCB5KSAtPiBhYnMoeC1AeCkgPD0gVy8yIGFuZCBhYnMoeS1AeSkgPD0gSC8yXHJcbiMgXHRjbGljayA6IC0+IFxyXG4jIFx0XHQjIGF1ZGlvLnBhdXNlKClcclxuIyBcdFx0aWYgc3RhdGU9PTAgdGhlbiBwbGFjZVF1ZWVuIEBpbmRleFxyXG4jIFx0XHRlbHNlIGlmIHN0YXRlPT0xIHRoZW4gbW92ZUtuaWdodCBAaW5kZXhcclxuIyBcdFx0ZWxzZSBpZiBzdGF0ZT09MiB0aGVuIG5ld0dhbWUoKVxyXG4jIFx0ZHJhd1BpZWNlIDogKG5hbWUpIC0+XHJcbiMgXHRcdHRleHRTaXplIDEuMSAqIFdcclxuIyBcdFx0ZmlsbCBcImJsYWNrXCJcclxuIyBcdFx0aWYgb3M9PSdXaW5kb3dzJyB0aGVuIHRleHQgbmFtZSxAeCxAeSswLjEqSFxyXG4jIFx0XHRpZiBvcyE9J1dpbmRvd3MnIHRoZW4gdGV4dCBuYW1lLEB4LEB5KzAuMCpIXHJcbiMgXHRkcmF3UXVlZW5Ib3AgIDogLT4gaWYgcihxdWVlbiklMj09MCBhbmQgQGluZGV4IT1xdWVlbiBhbmQgQGluZGV4IGluIHF1ZWVuSG9wcyB0aGVuIGVsbGlwc2UgQHgsIEB5LCAzKlJcclxuIyBcdGRyYXdLbmlnaHRIb3AgOiAtPiBpZiBjKHF1ZWVuKSUyPT0wIGFuZCBAaW5kZXggaW4ga25pZ2h0SG9wcyB0aGVuIGVsbGlwc2UgQHgsIEB5LCAzKlJcclxuIyBcdHRleHQgOiAodHh0KSAtPlxyXG4jIFx0XHR0ZXh0QWxpZ24gQ0VOVEVSLCBDRU5URVJcclxuIyBcdFx0dGV4dFNpemUgMC41KldcclxuIyBcdFx0ZmlsbCAnYmxhY2snXHJcbiMgXHRcdHRleHQgdHh0LCBAeCwgQHlcclxuIyBcdHJpbmcgOiA9PlxyXG4jIFx0XHRub0ZpbGwoKVxyXG4jIFx0XHRwdXNoKClcclxuIyBcdFx0c3Ryb2tlV2VpZ2h0IDNcclxuIyBcdFx0c3Ryb2tlICd5ZWxsb3cnXHJcbiMgXHRcdGVsbGlwc2UgQHgsIEB5LCA1KlJcclxuIyBcdFx0cG9wKClcclxuXHJcbiMgc2V0dXAgPSA9PlxyXG4jIFx0cmVTaXplKClcclxuIyBcdG5ld0dhbWUoKVxyXG4jIFx0cmVjdE1vZGUgQ0VOVEVSXHJcbiMgXHR0ZXh0QWxpZ24gQ0VOVEVSLCBDRU5URVJcclxuIyBcdGNyZWF0ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cclxuIyBQb3NpdGlvbiA9IChpbmRleCkgLT4gXCJhYmNkZWZnaFwiW2MgaW5kZXhdICsgXCIxMjM0NTY3OFwiW3IgaW5kZXhdXHJcblxyXG4jIGluZm8gPSAtPlxyXG4jIFx0ZmlsbCAnYmxhY2snXHJcbiMgXHR0ZXh0QWxpZ24gQ0VOVEVSLCBDRU5URVJcclxuIyBcdHRleHRTaXplIDAuNSpXXHJcbiMgXHR0ZW1wID0gaWYgc3RhdGU9PTAgdGhlbiBpbnRybyBlbHNlIHJlc3VsdHNcclxuIyBcdGZvciByZXN1bHQsaSBpbiB0ZW1wXHJcbiMgXHRcdHRleHQgcmVzdWx0LGlubmVyV2lkdGgvLzIsIDEwKkggKyBpKkgvMlxyXG5cclxuIyBkcmF3Qm9hcmQgPSA9PlxyXG4jIFx0biA9IFs2NCw2NCw2NV1bc3RhdGVdXHJcbiMgXHRyZWN0LmRyYXcoKSBmb3IgcmVjdCBpbiByZWN0cy5zbGljZSAwLG5cclxuXHJcbiMgc2hvd0xpdHRlcmEgPSAoZmxhZykgPT5cclxuIyBcdGNvbDEgPSBcImJsYWNrXCJcclxuIyBcdGNvbDIgPSBcIndoaXRlXCJcclxuIyBcdHRleHRTaXplIDAuNSpXXHJcbiMgXHRmb3IgaSBpbiByYW5nZSBOXHJcbiMgXHRcdHggPSBXKigxLjUraSkgKyBtYXJnaW54XHJcbiMgXHRcdHkgPSBXKihOLTEtaSkgKyBtYXJnaW55XHJcbiMgXHRcdGNvbDMgPSBpZiBmbGFnIHRoZW4gW2NvbDIsY29sMV1baSUyXSBlbHNlIGNvbDFcclxuIyBcdFx0bm9GaWxsKClcclxuIyBcdFx0aWYgZmxhZyBhbmQgaSUyPT0wIHRoZW4gY2lyY2xlIHgsIFcqKE4rMSksIDAuNipXXHJcbiMgXHRcdGZpbGwgY29sMVxyXG4jIFx0XHRpZiBmbGFnIGFuZCBpJTI9PTAgdGhlbiBjaXJjbGUgbWFyZ2lueCtXLzIsIHksMC42KldcclxuIyBcdFx0dGV4dCBcImFiY2RlZmdoXCJbaV0sIHgsIFcqKE4rMSlcclxuIyBcdFx0aWYgaSUyPT0wIHRoZW4gZmlsbCBjb2wzIGVsc2UgZmlsbCBjb2wxXHJcbiMgXHRcdHRleHQgXCIxMjM0NTY3OFwiW2ldLCBtYXJnaW54K1cvMiwgeVxyXG5cclxuIyBkcmF3ID0gPT5cclxuIyBcdGJhY2tncm91bmQgMTI4XHJcbiMgXHRkcmF3Qm9hcmQoKVxyXG4jIFx0c2hvd0xpdHRlcmEgc3RhdGU9PTBcclxuIyBcdGluZm8oKVxyXG5cclxuIyBcdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG4jIFx0aWYgc3RhdGUgPT0gMVxyXG4jIFx0XHRyZWN0c1txdWVlbl0uZHJhd1BpZWNlIFF1ZWVuXHJcbiMgXHRcdHJlY3RzW2tuaWdodF0uZHJhd1BpZWNlIEtuaWdodFxyXG5cclxuIyBcdHRleHRTaXplIDAuNTUqV1xyXG4jIFx0Zm9yIGkgaW4gcmFuZ2UgdGFrZW5cclxuIyBcdFx0aWYgdGFyZ2V0c1tpXSAhPSBrbmlnaHRcclxuIyBcdFx0XHRyZWN0c1t0YXJnZXRzW2ldXS50ZXh0IGNvdW50c1tpXVxyXG5cclxuIyBcdGZpbGwgJ2JsYWNrJ1xyXG4jIFx0Zm9yIGkgaW4gcXVlZW5Ib3BzXHJcbiMgXHRcdHJlY3RzW2ldLmRyYXdRdWVlbkhvcCgpXHJcblxyXG4jIFx0ZmlsbCAnd2hpdGUnXHJcbiMgXHRmb3IgaSBpbiBrbmlnaHRIb3BzXHJcbiMgXHRcdHJlY3RzW2ldLmRyYXdLbmlnaHRIb3AoKVxyXG5cclxuIyBcdGlmIHN0YXRlID09IDBcclxuIyBcdFx0Zm9yIGkgaW4gcmFuZ2UoTipOKVxyXG4jIFx0XHRcdGlmIG5vdCBOT1FVRUVOLmluY2x1ZGVzIGlcclxuIyBcdFx0XHRcdHJlY3RzW2ldLmRyYXdQaWVjZShRdWVlbilcclxuXHJcbiMgXHRpZiBzdGF0ZSA9PSAxXHJcbiMgXHRcdHJlY3RzW3RhcmdldHNbdGFrZW5dXS5yaW5nKClcclxuXHJcbiMgXHRpZiBzdGF0ZSA9PSAyXHJcbiMgXHRcdHJlY3RzW3F1ZWVuXS5kcmF3UGllY2UgUXVlZW5cclxuIyBcdFx0cmVjdHNba25pZ2h0XS5kcmF3UGllY2UgS25pZ2h0XHJcblxyXG4jIG1vdXNlUHJlc3NlZCA9IC0+XHJcbiMgXHRpZiBzdGF0ZSA9PSAyXHJcbiMgXHRcdHJlY3QgPSByZWN0c1s2NF1cclxuIyBcdFx0aWYgcmVjdC5pbnNpZGUgbW91c2VYLCBtb3VzZVkgdGhlbiByZWN0LmNsaWNrKClcclxuIyBcdFx0IyBuZXdHYW1lKClcclxuIyBcdFx0IyByZXR1cm5cclxuIyBcdGVsc2VcclxuIyBcdFx0Zm9yIHJlY3QgaW4gcmVjdHNcclxuIyBcdFx0XHRpZiByZWN0Lmluc2lkZSBtb3VzZVgsIG1vdXNlWSB0aGVuIHJlY3QuY2xpY2soKVxyXG4iXX0=
//# sourceURL=c:\github\2023-008-KnightMoves-p5-solid\coffee\sketch1.coffee