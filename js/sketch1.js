// Generated by CoffeeScript 2.5.1
var Board, Counts, Knight, KnightHops, N, NOQUEENS, Queen, QueenHops, Queens, S, Target, Targets, Z, audio, c, drawText, inside, mx, my, os, r, resize, rita, sum,
  indexOf = [].indexOf;

import {
  log,
  range
} from '../js/utils.js';

S = 50;

N = 8;

NOQUEENS = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

mx = S;

my = S / 2;

os = navigator.userAgent.includes('Windows') ? 'Windows' : 'Mac';

audio = new Audio('shortclick.mp3');

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

Board = class Board {
  constructor() {
    this.draw = this.draw.bind(this);
    this.values = _.map(range(N * N), (i) => {
      return {
        ri: r(i),
        ci: c(i)
      };
    });
  }

  draw() {
    var ci, i, j, l, len, len1, ref, ref1, results, ri;
    ref = this.values;
    for (j = 0, len = ref.length; j < len; j++) {
      ({ri, ci} = ref[j]);
      fill((ri + ci) % 2 ? 'darkgray' : 'lightgray');
      rect(mx + S * ci, my + S * ri, S, S);
      fill('black');
      textSize(0.5 * S);
    }
    ref1 = range(N);
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      text("abcdefgh"[i], mx + S / 2 + S * i, my + 8.5 * S);
      results.push(text("87654321"[i], mx - S / 2, my + S / 2 + S * i));
    }
    return results;
  }

};

window.onresize = function() {
  return resize();
};

resize = function() {
  var H, W;
  H = min(Math.floor(innerHeight / 10), Math.floor(innerWidth / 10));
  W = H;
  S = W;
  mx = (innerWidth - 8 * S) / 2;
  my = S / 2;
  resizeCanvas(innerWidth, innerHeight);
  return rita();
};

drawText = (txt, ix) => {
  var dy;
  dy = os === 'Windows' ? 0.1 * S : 0.0 * S;
  return text(txt, mx + S / 2 + S * c(ix), my + S / 2 + S * r(ix) + dy);
};

Counts = class Counts {
  constructor() {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.values = [];
  }

  draw() {
    var i, j, len, ref;
    fill('black');
    textSize(0.5 * S);
    ref = range(this.values.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      drawText(this.values[i], Z.targets.values[i]);
    }
    return text(sum(this.values) + ` moves in ${(new Date() - Z.start) / 1000} seconds`, mx + 4 * S, my + 9.25 * S);
  }

  update() {
    this.values.push(Z.count + 1);
    return Z.count = 0;
  }

};

Knight = class Knight {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    textSize(S);
    return drawText('♘', this.value);
  }

};

KnightHops = class KnightHops {
  constructor() {
    var c2, col, dc, dr, index, j, k, l, len, len1, r2, ref, ref1, row, ts;
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    k = Z.knight.value;
    ts = Z.targets.values;
    if (k === -1) {
      return [];
    }
    this.values = [];
    col = c(k);
    row = r(k);
    ref = [-2, -1, 1, 2];
    for (j = 0, len = ref.length; j < len; j++) {
      dc = ref[j];
      ref1 = [-2, -1, 1, 2];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        dr = ref1[l];
        if (Math.abs(dc) === Math.abs(dr)) {
          continue;
        }
        c2 = col + dc;
        r2 = row + dr;
        index = c2 + N * r2;
        if (indexOf.call(range(N), c2) >= 0 && indexOf.call(range(N), r2) >= 0 && indexOf.call(ts, index) >= 0) {
          this.values.push(index);
        }
      }
    }
    this.values.sort(function(a, b) {
      return a - b;
    });
  }

  draw() {
    var col, i, j, len, ref, results;
    col = c(Z.queen.value);
    if (col % 2 === 1) {
      return;
    }
    fill('white');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(circle(mx + S / 2 + S * c(i), my + S / 2 + S * r(i), S / 4));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        audio.play();
        Z.knight = new Knight(index);
        Z.knightHops = new KnightHops();
        if (index === Z.target.value) {
          Z.counts.update();
          Z.target.update(Z.targets.values[Z.counts.values.length + 1]);
          if (Z.counts.values.length === Z.targets.values.length - 1) {
            results.push(Z.state = 2);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(Z.count++);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Queen = class Queen {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.value = value;
  }

  draw() {
    fill('black');
    textSize(S);
    return drawText('♛', this.value);
  }

  click() {
    if (inside(this.value)) {
      return Z.state = 0;
    }
  }

};

Queens = class Queens {
  constructor() {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.values = _.filter(range(N * N), function(i) {
      return indexOf.call(NOQUEENS, i) < 0;
    });
  }

  draw() {
    var i, j, len, ref, results;
    fill('black');
    textSize(S);
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(drawText('♛', i));
    }
    return results;
  }

  click() {
    var index, j, len, ref, results;
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      if (inside(index)) {
        Z.count = 0;
        Z.counts = new Counts();
        Z.queen = new Queen(index);
        Z.queenHops = new QueenHops();
        Z.targets = new Targets();
        Z.knight = new Knight(Z.targets.values[Z.counts.values.length]);
        Z.target = new Target(Z.targets.values[Z.counts.values.length + 1]);
        Z.knightHops = new KnightHops();
        Z.state = 1;
        results.push(Z.start = new Date());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

QueenHops = class QueenHops {
  constructor() {
    var f;
    this.draw = this.draw.bind(this);
    this.queen = Z.queen.value;
    f = (i) => {
      var ci, dc, dr, ri;
      ci = c(i);
      ri = r(i);
      dc = Math.abs(ci - this.cq);
      dr = Math.abs(ri - this.rq);
      return ci === this.cq || ri === this.rq || dc === dr;
    };
    this.cq = c(this.queen);
    this.rq = r(this.queen);
    this.values = _.filter(range(N * N), f);
  }

  draw() {
    var i, j, len, ref, results, row;
    row = r(Z.queen.value);
    if (row % 2 === 0) {
      return;
    }
    fill('black');
    ref = this.values;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i !== this.queen) {
        results.push(circle(mx + S / 2 + S * c(i), my + S / 2 + S * r(i), S / 4));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Target = class Target {
  constructor(value) {
    this.draw = this.draw.bind(this);
    this.update = this.update.bind(this);
    this.value = value;
  }

  draw() {
    push();
    stroke('yellow');
    strokeWeight(3);
    noFill();
    circle(mx + S / 2 + S * c(this.value), my + S / 2 + S * r(this.value), S / 2);
    return pop();
  }

  update() {
    return this.value = Z.targets.values[Z.counts.values.length + 1];
  }

};

Targets = class Targets {
  constructor() {
    this.values = range(N * N).filter((i) => {
      return indexOf.call(Z.queenHops.values, i) < 0;
    });
  }

};

inside = function(index) {
  var ci, ref, ref1, ri;
  ci = c(index);
  ri = r(index);
  return (S * ci < (ref = mouseX - mx) && ref < S * ci + S) && (S * ri < (ref1 = mouseY - my) && ref1 < S * ri + S);
};

Z = {}; // object to hold global variables.

Z.state = 0;

Z.count = 0; //new Count

Z.counts = new Counts();

Z.board = new Board();

Z.queen = new Queen(0);

Z.queens = new Queens();

Z.queenHops = new QueenHops();

Z.targets = new Targets();

Z.knight = new Knight(Z.targets.values[0]);

Z.target = new Target(Z.targets.values[1]);

Z.knightHops = new KnightHops();

rita = () => {
  var j, len, op, ops, ref, results;
  background('gray');
  textSize(S);
  if (Z.state === 0) {
    ops = "board,queens";
  }
  if (Z.state === 1) {
    ops = "board,queen,queenHops,knight,target,counts,knightHops";
  }
  if (Z.state === 2) {
    ops = "board,queen,queenHops,knight,counts";
  }
  ref = ops.split(',');
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    op = ref[j];
    results.push(Z[op].draw());
  }
  return results;
};

window.mousePressed = () => {
  Z["queens,knightHops,queen".split(',')[Z.state]].click();
  return rita();
};

window.setup = () => {
  createCanvas(innerWidth, innerHeight);
  frameRate(1);
  textAlign(CENTER, CENTER);
  return resize();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves-p5-solid\coffee\sketch1.coffee